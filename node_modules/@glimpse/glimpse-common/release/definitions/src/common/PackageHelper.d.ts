export interface INpmPackage {
    name?: string;
    version?: string;
}
export interface IPackageHelper {
    /**
     * Find the package.json file associated with the file
     * used as the "main" file for this running instance of node.
     */
    findAppPackageJsonPath(): string;
    /**
     * Find the glimpse.common package.json file path
     */
    findGlimpseCommonPackageJsonPath(): string;
    /**
     * Given child path, find the package.json file path associated with
     * child that path
     */
    findPackageJsonPath(dir: string): string;
    /**
     * Given packageJsonPath, determine version from package.json
     */
    getPackageVersion(packageJsonPath: string): string;
    /**
     * Given packageJsonPath, determine name from package.json
     */
    getPackageName(packageJsonPath: string): string;
    /**
     * Given packageJsonPath, get the target package
     */
    getPackage(packageJsonPath: string): INpmPackage;
    /**
     * Given child path, get the package associated with
     * child that path
     */
    getPackageFromChildPath(dir: string): INpmPackage;
}
export declare class PackageHelper implements IPackageHelper {
    private static _instance;
    static readonly instance: PackageHelper;
    /**
     * Find the package.json file associated with the file
     * used as the "main" file for this running instance of node.
     */
    findAppPackageJsonPath(): string;
    /**
     * Find the glimpse.common package.json file
     */
    findGlimpseCommonPackageJsonPath(): string;
    /**
     * Given child path, find the package.json file path associated with
     * child that path
     */
    findPackageJsonPath(dir: string): string;
    /**
     * Given packageJsonPath, determine version from package.json
     */
    getPackageVersion(packageJsonPath: string): string;
    /**
     * Given packageJsonPath, determine name from package.json
     */
    getPackageName(packageJsonPath: string): string;
    /**
     * given packageJsonPath, determine dependencies
     */
    getDependencies(packageJsonPath: string): Object;
    /**
     * given packageJsonPath, determine dependencies
     */
    getDevDependencies(packageJsonPath: string): Object;
    /**
     * Given packageJsonPath, get the target package
     */
    getPackage(packageJsonPath: string): INpmPackage;
    private getPackageRootProperty(packageJsonPath, property);
    /**
     * Given child path, get the package associated with
     * child that path
     */
    getPackageFromChildPath(dir: string): INpmPackage;
}
