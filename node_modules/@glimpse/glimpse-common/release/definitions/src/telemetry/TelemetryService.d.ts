import { ITelemetryConfig } from './TelemetryConfig';
/**
 * Map from string -> string. Used to pass name/value pairs through app insights events.
 */
export interface IProperties {
    [key: string]: string;
}
/**
 * Map from string -> number.  Used to pass measurements through app insights events
 */
export interface IMeasurements {
    [key: string]: number;
}
/** indicates which of the various glimpse components is sending the event */
export declare enum GlimpseComponentType {
    OTHER = 0,
    NODE_SERVER = 1,
    BROWSER_AGENT = 2,
    NODE_AGENT = 3,
    CLIENT = 4,
    HUD = 5,
}
/**
 * Common properties shared by all events passed to app insights
 */
export interface ICommonProperties extends IProperties {
    /** unique identifier for this instance of the glimpse client. */
    sessionId: string;
    /** glimpse */
    glimpseComponentType: string;
}
/**
 * Shape of object defining
 */
export interface ITelemetryEvent {
    name: string;
    properties: ICommonProperties;
    measurements: IMeasurements;
}
export interface ITelemetryService {
    isEnabled(): boolean;
    sendEvent(eventName: string, properties: IProperties, measurements: IMeasurements): any;
    getSessionId(): string;
}
/**
 * Class responsible for sending telemetry events.
 *
 * Microsoft values privacy.  For details, please see our privacy
 * statement at http://go.microsoft.com/fwlink/?LinkId=521839&CLCID=0409.
 */
export declare class TelemetryService implements ITelemetryService {
    private componentType;
    private telemetryConfig;
    private aiClient;
    private isTelemetryEnabled;
    private sessionId;
    constructor(componentType: GlimpseComponentType, telemetryConfig: ITelemetryConfig);
    getSessionId(): string;
    isEnabled(): boolean;
    /**
     * send an event (if app insights is currently configured), or queue it for sending later when app insights is configured.
     */
    sendEvent(eventName: string, properties: IProperties, measurements: IMeasurements): void;
}
