/// <reference types="node" />
import { IConfigSettings, IValueChangedCallback } from './IConfigSettings';
import events = require('events');
/**
 * A class to encapsulate configuration settings for the application.
 */
export declare class ConfigSettings extends events.EventEmitter implements IConfigSettings {
    static EVENT_VALUE_CHANGED: string;
    private _config;
    private _localOverrides;
    /**
     * Construct a new ConfigSettings instance.  The values will be retrieved in the following order:
     *   local overrides
     *   command-line values -
     *   environmant variables
     *   local configuration file
     *   default configuration file
     *
     * @commandLineArgs - an object containing key/value pairs of command-line args, or a string which specifies the variable
     *                    name prefix to use as a filter over process.argv.  Args are assumed to be of the form
     *                    "--prefix<name> value"
     * @commandLineArgs - an object containing key/value pairs of command-line args, or a string which specifies the variable
     *                    name prefix to use as a filter over process.argv.
     * @localConfigFilePath - optional. path to the local configuration settings file.
     * @defaultConfigFilePath - optional. path to the default configuration settings file.
     */
    constructor(commandLineArgs: Object | string, environmentVariables: Object | string, localConfigFilePath?: string, defaultConfigFilePath?: string);
    /**
     * filter out command-line args to include only those that contain the specified prefix.
     * args are the given args array, or process.argv if args is not specified.
     */
    static filterCommandLineArgs(prefix: string, args?: string[]): {};
    /**
     * filter out the environment variables to include only those that contain the specified
     * prefix.  Args are given by the specifed object, or process.env is used if args not specified.
     */
    static filterEnvironmentArgs(prefix: string, args?: Object): any;
    /**
     * get the value of the given property name
     */
    get(name: string, defaultVal?: any): any;
    /**
     *  return the value for the specified property as a boolean, or defaultVal if this property doesn't exist.
     */
    getBoolean(name: string, defaultVal?: boolean): boolean;
    set(name: string, value: string | boolean | number): void;
    onValueChanged(cb: IValueChangedCallback): void;
    /**
     *  search for a file named fileName, starting at startPath, and walking up the directory hierarchy.
     *   return full path of found file, or undefined if file isn't found.
     */
    static findFile(startPath: any, fileName: any): any;
    /**
     * convert a value into a boolean value
     */
    private parseBool(v);
}
