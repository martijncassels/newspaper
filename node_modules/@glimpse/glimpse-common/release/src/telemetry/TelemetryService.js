'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var uuid = require("uuid");
/* tslint:disable:no-var-requires */
var appInsights = require('applicationinsights');
/** indicates which of the various glimpse components is sending the event */
var GlimpseComponentType;
(function (GlimpseComponentType) {
    GlimpseComponentType[GlimpseComponentType["OTHER"] = 0] = "OTHER";
    GlimpseComponentType[GlimpseComponentType["NODE_SERVER"] = 1] = "NODE_SERVER";
    GlimpseComponentType[GlimpseComponentType["BROWSER_AGENT"] = 2] = "BROWSER_AGENT";
    GlimpseComponentType[GlimpseComponentType["NODE_AGENT"] = 3] = "NODE_AGENT";
    GlimpseComponentType[GlimpseComponentType["CLIENT"] = 4] = "CLIENT";
    GlimpseComponentType[GlimpseComponentType["HUD"] = 5] = "HUD";
})(GlimpseComponentType = exports.GlimpseComponentType || (exports.GlimpseComponentType = {}));
;
/**
 * Class responsible for sending telemetry events.
 *
 * Microsoft values privacy.  For details, please see our privacy
 * statement at http://go.microsoft.com/fwlink/?LinkId=521839&CLCID=0409.
 */
var TelemetryService = (function () {
    function TelemetryService(componentType, telemetryConfig) {
        // telemetry enabled defaults to true, value will be reset when we receive the telemetryConfig.
        this.isTelemetryEnabled = true;
        this.componentType = componentType;
        this.telemetryConfig = telemetryConfig;
        this.isTelemetryEnabled = telemetryConfig ? telemetryConfig.enabled : false;
        if (this.isTelemetryEnabled) {
            appInsights.setup('00000000-0000-0000-0000-000000000000')
                .setAutoCollectConsole(false)
                .setAutoCollectExceptions(false)
                .setAutoCollectPerformance(false)
                .setAutoCollectRequests(false);
            var client = appInsights.getClient(telemetryConfig.instrumentationKey);
            client.context.tags[client.context.keys.deviceMachineName] = ''; //prevent App Insights from reporting machine name
            client.config.endpointUrl = telemetryConfig.uri;
            this.aiClient = client;
        }
        this.sessionId = uuid.v4();
    }
    TelemetryService.prototype.getSessionId = function () {
        return this.sessionId;
    };
    TelemetryService.prototype.isEnabled = function () {
        return this.isTelemetryEnabled;
    };
    /**
     * send an event (if app insights is currently configured), or queue it for sending later when app insights is configured.
     */
    TelemetryService.prototype.sendEvent = function (eventName, properties, measurements) {
        if (this.isTelemetryEnabled && this.aiClient) {
            // ensure we have the "common properties" required for all events
            var cp = properties;
            if (!cp.sessionId || !cp.glimpseComponentType) {
                // make shallow clone of object
                var newProps = {};
                for (var p in properties) {
                    if (properties.hasOwnProperty(p)) {
                        newProps[p] = properties[p];
                    }
                }
                cp = newProps;
                cp.sessionId = this.sessionId;
                cp.glimpseComponentType = GlimpseComponentType[this.componentType];
            }
            this.aiClient.trackEvent(eventName, cp, measurements);
        }
    };
    return TelemetryService;
}());
exports.TelemetryService = TelemetryService;

//# sourceMappingURL=../../../maps/src/telemetry/TelemetryService.js.map
