"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var os = require("os");
var PackageHelper_1 = require("../common/PackageHelper");
/**
 * singletone instance per app
 */
var telemetryAppInstanceData;
/**
 * retrieve an ITelemetryAppInstanceData for the currently running app.
 */
function getTelemetryAppInstanceData(configSettings) {
    if (!telemetryAppInstanceData) {
        var glimpseVersion = PackageHelper_1.PackageHelper.instance.getPackageVersion(PackageHelper_1.PackageHelper.instance.findGlimpseCommonPackageJsonPath());
        var appName = PackageHelper_1.PackageHelper.instance.getPackageName(PackageHelper_1.PackageHelper.instance.findAppPackageJsonPath());
        telemetryAppInstanceData = {
            glimpseVersion: glimpseVersion,
            appName: appName,
            machineId: AppInstanceDataHelpers.computeMachineId(configSettings.get('telemetry.identity.salt', undefined)),
            operatingSystemPlatform: os.platform(),
            operatingSystemRelease: os.release(),
            operatingSystemType: os.type(),
            runtimeVersion: process.version,
            runtimeName: 'NodeJS'
        };
    }
    return telemetryAppInstanceData;
}
exports.getTelemetryAppInstanceData = getTelemetryAppInstanceData;
var AppInstanceDataHelpers = (function () {
    function AppInstanceDataHelpers() {
    }
    /**
     * compute machine ID for this node
     * @salt - an optional user-specified value that gives users control over their machine identity in our telemetry system.
     *         if specified, it will be included in the hashed value of the mac address that we use a "machine identity" for
     *         for telemetry.
     */
    AppInstanceDataHelpers.computeMachineId = function (salt) {
        var macAddress = AppInstanceDataHelpers.getMacAddress();
        var data = macAddress;
        if (salt && salt.length > 0) {
            data = "salt: " + salt + ", macAddress: " + macAddress;
        }
        var machineId = crypto.createHash('sha256')
            .update(data, 'utf8')
            .digest('hex');
        return machineId;
    };
    /**
     * Retrieve a mac address for the current node
     */
    AppInstanceDataHelpers.getMacAddress = function () {
        var networkInterfaces = os.networkInterfaces();
        // if more than one mac address, just pick the first one that is not internal
        var interfaceNames = Object.keys(networkInterfaces);
        for (var i = 0; i < interfaceNames.length; i++) {
            var name_1 = interfaceNames[i];
            var iface = networkInterfaces[name_1];
            for (var j = 0; j < iface.length; j++) {
                var entry = iface[j];
                if (!entry.internal) {
                    var addr = entry.mac;
                    if (os.platform() === 'win32') {
                        // maintain consistency with what getmac library returns
                        addr = addr.replace(/:/g, '-').toUpperCase();
                    }
                    return addr;
                }
            }
        }
        return '00-00-00-00-00-00';
    };
    return AppInstanceDataHelpers;
}());
exports.AppInstanceDataHelpers = AppInstanceDataHelpers;

//# sourceMappingURL=../../../maps/src/telemetry/TelemetryAppInstanceData.js.map
