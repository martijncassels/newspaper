'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/*tslint:disable:no-var-requires */
var cc = require('config-chain');
/*tslint:enable:no-var-requires */
var events = require("events");
var path = require("path");
var fs = require("fs");
/**
 * A class to encapsulate configuration settings for the application.
 */
var ConfigSettings = (function (_super) {
    __extends(ConfigSettings, _super);
    /**
     * Construct a new ConfigSettings instance.  The values will be retrieved in the following order:
     *   local overrides
     *   command-line values -
     *   environmant variables
     *   local configuration file
     *   default configuration file
     *
     * @commandLineArgs - an object containing key/value pairs of command-line args, or a string which specifies the variable
     *                    name prefix to use as a filter over process.argv.  Args are assumed to be of the form
     *                    "--prefix<name> value"
     * @commandLineArgs - an object containing key/value pairs of command-line args, or a string which specifies the variable
     *                    name prefix to use as a filter over process.argv.
     * @localConfigFilePath - optional. path to the local configuration settings file.
     * @defaultConfigFilePath - optional. path to the default configuration settings file.
     */
    function ConfigSettings(commandLineArgs, environmentVariables, localConfigFilePath, defaultConfigFilePath) {
        var _this = _super.call(this) || this;
        _this._localOverrides = {};
        if (typeof commandLineArgs === 'string') {
            commandLineArgs = ConfigSettings.filterCommandLineArgs(commandLineArgs, process.argv);
        }
        else if (typeof commandLineArgs !== 'object') {
            commandLineArgs = {};
        }
        if (typeof environmentVariables === 'string') {
            environmentVariables = ConfigSettings.filterEnvironmentArgs(environmentVariables, process.env);
        }
        else if (typeof environmentVariables !== 'object') {
            environmentVariables = {};
        }
        _this._config = cc(_this._localOverrides, commandLineArgs, // command-line options take first precedent  
        environmentVariables, // environment variables prefixed with glimpse_
        localConfigFilePath, // custom config file
        defaultConfigFilePath // default config file
        );
        return _this;
    }
    /**
     * filter out command-line args to include only those that contain the specified prefix.
     * args are the given args array, or process.argv if args is not specified.
     */
    ConfigSettings.filterCommandLineArgs = function (prefix, args) {
        args = args || process.argv;
        var filteredArgs = {};
        for (var i = 0; i < args.length; i++) {
            var curr = args[i];
            if (curr.indexOf(prefix) === 0 && (i < args.length - 1)) {
                var key = curr.substring(prefix.length, args[i].length);
                filteredArgs[key] = args[i + 1];
                i++;
            }
        }
        return filteredArgs;
    };
    /**
     * filter out the environment variables to include only those that contain the specified
     * prefix.  Args are given by the specifed object, or process.env is used if args not specified.
     */
    ConfigSettings.filterEnvironmentArgs = function (prefix, args) {
        args = args || process.env;
        return cc.env(prefix, args);
    };
    /**
     * get the value of the given property name
     */
    ConfigSettings.prototype.get = function (name, defaultVal) {
        var v = this._config.get(name);
        if (v === undefined) {
            v = defaultVal;
        }
        return v;
    };
    /**
     *  return the value for the specified property as a boolean, or defaultVal if this property doesn't exist.
     */
    ConfigSettings.prototype.getBoolean = function (name, defaultVal) {
        var v = this._config.get(name);
        if (v !== undefined) {
            v = this.parseBool(v);
        }
        if (v === undefined) {
            v = defaultVal;
        }
        return v;
    };
    /*
     *  set a new value for the given prooperty name.  Will override any existing values.
     */
    ConfigSettings.prototype.set = function (name, value) {
        var oldVal = this._config.get(name);
        this._config.set(name, value);
        this.emit(ConfigSettings.EVENT_VALUE_CHANGED, name, oldVal, value);
    };
    /*
     *  register given callback for when a config settings value changes
     */
    ConfigSettings.prototype.onValueChanged = function (cb) {
        this.on(ConfigSettings.EVENT_VALUE_CHANGED, cb);
    };
    /**
     *  search for a file named fileName, starting at startPath, and walking up the directory hierarchy.
     *   return full path of found file, or undefined if file isn't found.
     */
    ConfigSettings.findFile = function (startPath, fileName) {
        var dirName = startPath;
        var testPath = undefined;
        var stat = undefined;
        do {
            testPath = path.join(dirName, fileName);
            try {
                stat = fs.statSync(testPath);
            }
            catch (err) {
                // swallow error if file doesn't exist
            }
            dirName = path.dirname(dirName);
        } while ((!stat || !stat.isFile()) && dirName !== path.dirname(dirName));
        return (stat && stat.isFile()) ? testPath : undefined;
    };
    /**
     * convert a value into a boolean value
     */
    ConfigSettings.prototype.parseBool = function (v) {
        var rtrn;
        if (typeof v === 'boolean') {
            rtrn = v;
        }
        else if (typeof v === 'string') {
            rtrn = (v.toLowerCase() === 'true');
        }
        else if (typeof v === 'number') {
            rtrn = v !== 0;
        }
        return rtrn;
    };
    return ConfigSettings;
}(events.EventEmitter));
ConfigSettings.EVENT_VALUE_CHANGED = 'changed';
exports.ConfigSettings = ConfigSettings;

//# sourceMappingURL=../../../maps/src/configuration/ConfigSettings.js.map
