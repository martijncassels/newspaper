'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("util");
var TelemetryEvents_1 = require("../telemetry/TelemetryEvents");
var ErrorCodes_1 = require("./ErrorCodes");
var PackageHelper_1 = require("../common/PackageHelper");
var TelemetryErrorReportingService = (function () {
    function TelemetryErrorReportingService(telemetryService) {
        this.sentDependencies = false;
        this.telemetryService = telemetryService;
    }
    TelemetryErrorReportingService.prototype.reportError = function (error) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        if (this.telemetryService.isEnabled) {
            if (!this.sentDependencies) {
                this.sendDependencies();
            }
            var measurements = {};
            var properties = {
                // fill in a 'stack' property on the properties object
                stack: new Error().stack,
                severity: '' + error.severity,
                errorClass: '' + error.errorClass,
                errorCode: '' + error.errorCode,
                errorSlug: ErrorCodes_1.getSlugForErrorCode(error.errorCode),
                message: util.format.apply(util, [error.message].concat(params))
            };
            this.telemetryService.sendEvent(TelemetryEvents_1.TelemetryEvents.ERROR, properties, measurements);
        }
    };
    TelemetryErrorReportingService.prototype.sendDependencies = function () {
        if (this.telemetryService.isEnabled && !this.sentDependencies) {
            var appPackageJsonPath = PackageHelper_1.PackageHelper.instance.findAppPackageJsonPath();
            var dependencies = PackageHelper_1.PackageHelper.instance.getDependencies(appPackageJsonPath);
            var devDependencies = PackageHelper_1.PackageHelper.instance.getDevDependencies(appPackageJsonPath);
            var measurements = {};
            var properties = {
                dependencies: JSON.stringify(dependencies),
                devDependencies: JSON.stringify(devDependencies)
            };
            this.telemetryService.sendEvent(TelemetryEvents_1.TelemetryEvents.DEPENDENCIES, properties, measurements);
            this.sentDependencies = true;
        }
    };
    return TelemetryErrorReportingService;
}());
exports.TelemetryErrorReportingService = TelemetryErrorReportingService;

//# sourceMappingURL=../../../maps/src/errors/TelemetryErrorReportingService.js.map
