'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorCodes_1 = require("./ErrorCodes");
var IGlimpseError_1 = require("./IGlimpseError");
var semver_1 = require("semver");
function createNoContextError() {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.Internal,
        errorCode: ErrorCodes_1.ErrorCode.NoContext,
        message: 'Glimpse was unable to retrieve the context associated with a request at location %s'
    };
}
exports.createNoContextError = createNoContextError;
function createUnexpectedContextError() {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.Internal,
        errorCode: ErrorCodes_1.ErrorCode.UnexpectedContextValue,
        message: 'Glimpse unexpected context value at location %s.  Expecting context ID %s.  Actual context ID is %s'
    };
}
exports.createUnexpectedContextError = createUnexpectedContextError;
function createPackageRequiredBeforeInitError(packageName) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.User,
        errorCode: ErrorCodes_1.ErrorCode.PackageRequiredBeforeInit,
        message: "The package '" + packageName + "' was imported before Glimpse was initialized.  Glimpse may not capture data related to that package."
    };
}
exports.createPackageRequiredBeforeInitError = createPackageRequiredBeforeInitError;
function createUnsupportedPackageRequiredError(packageName, requiredVersion, supportedRange) {
    // We check if an older version than we support was required, or a newer one,
    // and set the severity and error code appropriately
    if (semver_1.outside(requiredVersion, supportedRange, '>')) {
        return {
            severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
            errorClass: IGlimpseError_1.GlimpseErrorClass.User,
            errorCode: ErrorCodes_1.ErrorCode.NewerUnsupportedPackageRequired,
            message: "Glimpse does not support version " + requiredVersion + " of " + packageName + " yet. You can get rich insights into " + packageName + " by downgrading to a supported version, as covered at " + ErrorCodes_1.getUrlForErrorCode(ErrorCodes_1.ErrorCode.NewerUnsupportedPackageRequired) + "."
        };
    }
    // Older
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Warning,
        errorClass: IGlimpseError_1.GlimpseErrorClass.User,
        errorCode: ErrorCodes_1.ErrorCode.OlderUnsupportedPackageRequired,
        message: "Glimpse does not support version " + requiredVersion + " of " + packageName + ". You can get rich insights into " + packageName + " by upgrading to a supported version, as covered at " + ErrorCodes_1.getUrlForErrorCode(ErrorCodes_1.ErrorCode.OlderUnsupportedPackageRequired) + "."
    };
}
exports.createUnsupportedPackageRequiredError = createUnsupportedPackageRequiredError;
function createHttpClientError(err) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Warning,
        errorClass: IGlimpseError_1.GlimpseErrorClass.User,
        errorCode: ErrorCodes_1.ErrorCode.HttpClientError,
        message: "A client HTTP request has errored, which will prevent this request from showing up in the Glimpse UI: " + err
    };
}
exports.createHttpClientError = createHttpClientError;
function createHttpServerError(err) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Warning,
        errorClass: IGlimpseError_1.GlimpseErrorClass.User,
        errorCode: ErrorCodes_1.ErrorCode.HttpServerError,
        message: "A server HTTP request has errored which, will prevent this request from showing up in the Glimpse UI: " + err
    };
}
exports.createHttpServerError = createHttpServerError;
function createHttpServerEarlyRequestTerminationError(requestUrl) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Warning,
        errorClass: IGlimpseError_1.GlimpseErrorClass.User,
        errorCode: ErrorCodes_1.ErrorCode.HttpServerEarlyRequestTerminationError,
        message: "A server HTTP response for request URL " + requestUrl + " was ended before the request was completed, which may prevent body information from showing up in the Glimpse UI"
    };
}
exports.createHttpServerEarlyRequestTerminationError = createHttpServerEarlyRequestTerminationError;
function createAuthorizationInvocationFailedError(err) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.User,
        errorCode: ErrorCodes_1.ErrorCode.AuthorizationInvocationFailed,
        message: "A server authorization invocation failed with error: " + err
    };
}
exports.createAuthorizationInvocationFailedError = createAuthorizationInvocationFailedError;
function createStackHelperUnsupportedSourceMapUriError(uri) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.Internal,
        errorCode: ErrorCodes_1.ErrorCode.StackHelperUnsupportedSourceMapUri,
        message: "Unsupported source map URI format found:  " + uri
    };
}
exports.createStackHelperUnsupportedSourceMapUriError = createStackHelperUnsupportedSourceMapUriError;
function createStackHelperUnsupportedStackFrameFormat(stackFrame) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.Internal,
        errorCode: ErrorCodes_1.ErrorCode.StackHelperUnsupportedStackFrameFormat,
        message: "Unsupported stack frame format found:  " + stackFrame
    };
}
exports.createStackHelperUnsupportedStackFrameFormat = createStackHelperUnsupportedStackFrameFormat;
function createAsyncTrackError(msg) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Error,
        errorClass: IGlimpseError_1.GlimpseErrorClass.Internal,
        errorCode: ErrorCodes_1.ErrorCode.AsyncTrackError,
        message: "AsyncTrack error reported: " + msg
    };
}
exports.createAsyncTrackError = createAsyncTrackError;
function createAsyncTrackWarning(msg) {
    return {
        severity: IGlimpseError_1.GlimpseErrorSeverity.Warning,
        errorClass: IGlimpseError_1.GlimpseErrorClass.Internal,
        errorCode: ErrorCodes_1.ErrorCode.AsyncTrackWarning,
        message: "AsyncTrack warning reported: " + msg
    };
}
exports.createAsyncTrackWarning = createAsyncTrackWarning;

//# sourceMappingURL=../../../maps/src/errors/Errors.js.map
