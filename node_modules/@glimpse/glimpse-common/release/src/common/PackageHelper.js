"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var FileHelper_1 = require("./FileHelper");
var PackageHelper = (function () {
    function PackageHelper() {
    }
    Object.defineProperty(PackageHelper, "instance", {
        get: function () {
            return PackageHelper._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Find the package.json file associated with the file
     * used as the "main" file for this running instance of node.
     */
    PackageHelper.prototype.findAppPackageJsonPath = function () {
        return this.findPackageJsonPath(require.main.filename);
    };
    /**
     * Find the glimpse.common package.json file
     */
    PackageHelper.prototype.findGlimpseCommonPackageJsonPath = function () {
        return this.findPackageJsonPath(__dirname);
    };
    /**
     * Given child path, find the package.json file path associated with
     * child that path
     */
    PackageHelper.prototype.findPackageJsonPath = function (dir) {
        var fileName = 'package.json';
        var dirName = path.dirname(dir);
        return FileHelper_1.FileHelper.findFileInParent(dirName, fileName);
    };
    /**
     * Given packageJsonPath, determine version from package.json
     */
    PackageHelper.prototype.getPackageVersion = function (packageJsonPath) {
        return this.getPackageRootProperty(packageJsonPath, 'version');
    };
    /**
     * Given packageJsonPath, determine name from package.json
     */
    PackageHelper.prototype.getPackageName = function (packageJsonPath) {
        return this.getPackageRootProperty(packageJsonPath, 'name');
    };
    /**
     * given packageJsonPath, determine dependencies
     */
    PackageHelper.prototype.getDependencies = function (packageJsonPath) {
        return this.getPackageRootProperty(packageJsonPath, 'dependencies');
    };
    /**
     * given packageJsonPath, determine dependencies
     */
    PackageHelper.prototype.getDevDependencies = function (packageJsonPath) {
        return this.getPackageRootProperty(packageJsonPath, 'devDependencies');
    };
    /**
     * Given packageJsonPath, get the target package
     */
    PackageHelper.prototype.getPackage = function (packageJsonPath) {
        var json = undefined;
        if (packageJsonPath) {
            json = require.main.require(packageJsonPath);
        }
        return json;
    };
    PackageHelper.prototype.getPackageRootProperty = function (packageJsonPath, property) {
        var value = '';
        var json = this.getPackage(packageJsonPath);
        if (json && json[property]) {
            value = json[property];
        }
        return value;
    };
    /**
     * Given child path, get the package associated with
     * child that path
     */
    PackageHelper.prototype.getPackageFromChildPath = function (dir) {
        var packageJsonPath = this.findPackageJsonPath(dir);
        if (packageJsonPath) {
            return this.getPackage(packageJsonPath);
        }
    };
    return PackageHelper;
}());
PackageHelper._instance = new PackageHelper();
exports.PackageHelper = PackageHelper;

//# sourceMappingURL=../../../maps/src/common/PackageHelper.js.map
