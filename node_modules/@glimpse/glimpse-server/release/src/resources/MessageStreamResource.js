'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var Resource = (function () {
    function Resource(server) {
        this.name = 'message-stream';
        this.uriTemplate = '{?types,contextId}';
        this.type = 'client';
        if (server) {
            this.init(server.providers.messagePublisher);
        }
    }
    Resource.prototype.init = function (messagePublisher) {
        this.messagePublisher = messagePublisher;
    };
    Resource.prototype.invoke = function (req, res) {
        // TODO: Still need to complete pings (see #45)
        var types = req.query.types ? req.query.types.split(',') : [];
        var contextId = req.query.contextId;
        res.writeHead(200, {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive'
        });
        var subscription = this.messagePublisher.streamMessages(contextId, types, function (err, message) {
            if (err) {
                return err;
            }
            if (message) {
                var payload = '';
                payload += 'id: ' + message.id + '\n';
                payload += 'event: message\n';
                payload += 'data: [' + message.payload + ']\n';
                payload += '\n';
                res.write(payload);
                res.flush();
            }
            else {
                res.end();
            }
        });
        req.on('close', function done() {
            subscription.done();
        });
        // ping logic to keep alive connection
        var pingId = 0;
        function ping() {
            var payload = 'id: ' + pingId++ + '\n';
            payload += 'event: ping\n';
            payload += 'data: []\n';
            payload += '\n';
            res.write(payload);
            res.flush();
        }
        // start pinging immediately,
        // and then on 20 second intervals
        ping();
        var keepAlive = setInterval(ping, 20000);
        res.on('close', function close() {
            clearInterval(keepAlive);
        });
    };
    ;
    return Resource;
}());
exports.Resource = Resource;

//# sourceMappingURL=../../../maps/src/resources/MessageStreamResource.js.map
