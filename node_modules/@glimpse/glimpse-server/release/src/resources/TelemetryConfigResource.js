'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var glimpse_common_1 = require("@glimpse/glimpse-common");
var glimpse_common_2 = require("@glimpse/glimpse-common");
/**
 * Resource for telemetry configuration details to enable client to send telemetry data.
 *
 * Microsoft values privacy.  For details, please see our privacy
 * statement at http://go.microsoft.com/fwlink/?LinkId=521839&CLCID=0409.
 */
var Resource = (function () {
    function Resource(server) {
        this.name = 'telemetry-config';
        this.templateName = 'telemetryConfigTemplate';
        this.uriTemplate = '';
        this.type = 'client';
        this.telemetryConfig = glimpse_common_1.getTelemetryConfig(server.providers.configSettings);
        this.appInstanceData = glimpse_common_2.getTelemetryAppInstanceData(server.providers.configSettings);
        this.serverTelemetrySessionId = server.providers.telemetryService.getSessionId();
    }
    /**
     *  returns an ITelemetryConfig object with the appropriate values.
     */
    Resource.prototype.createTelemetryConfig = function (clientIP) {
        return {
            clientIP: clientIP,
            serverSessionId: this.serverTelemetrySessionId,
            // ITelemetryConfig
            enabled: this.telemetryConfig.enabled,
            instrumentationKey: this.telemetryConfig.instrumentationKey,
            uri: this.telemetryConfig.uri,
            privacyPolicy: this.telemetryConfig.privacyPolicy,
            // ITelemetryAppInstanceData
            serverGlimpseVersion: this.appInstanceData.glimpseVersion,
            serverMachineId: this.appInstanceData.machineId,
            serverAppName: this.appInstanceData.appName,
            serverOSPlatform: this.appInstanceData.operatingSystemPlatform,
            serverOSRelease: this.appInstanceData.operatingSystemRelease,
            serverOSType: this.appInstanceData.operatingSystemType,
            serverRuntimeVersion: this.appInstanceData.runtimeVersion,
            serverRuntimeName: this.appInstanceData.runtimeName
        };
    };
    /**
     * Invoke the resource
     */
    Resource.prototype.invoke = function (req, res) {
        res.status(200);
        res.type('application/json');
        res.send(this.createTelemetryConfig(req.socket.remoteAddress));
    };
    return Resource;
}());
exports.Resource = Resource;

//# sourceMappingURL=../../../maps/src/resources/TelemetryConfigResource.js.map
