"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var VersionInfoService = (function () {
    function VersionInfoService(packageHelper) {
        this.agentVersions = {};
        this.serverVersion = {};
        this.dependenciesVersion = {};
        this.resourceVersion = {};
        this.clientProperty = 'client';
        this.clientPathProperty = 'clientPath';
        this.browserAgentProperty = 'browserAgent';
        this.browserAgentPathProperty = 'browserAgentPath';
        this.hudAgentProperty = 'hud';
        this.hudAgentPathProperty = 'hudPath';
        this.packageHelper = packageHelper;
        this.discoverResourceVersions();
        this.discoverDependenciesVersions();
        this.discoverServerVersions();
    }
    VersionInfoService.prototype.getServerPackage = function () {
        return this.packageHelper.getPackageFromChildPath(__dirname);
    };
    VersionInfoService.prototype.discoverResourceVersions = function () {
        var serverPackageJson = this.getServerPackage();
        this.resourceVersion[this.clientProperty] = serverPackageJson[this.clientProperty] || serverPackageJson[this.clientPathProperty];
        this.resourceVersion[this.browserAgentProperty] = serverPackageJson[this.browserAgentProperty] || serverPackageJson[this.browserAgentPathProperty];
        this.resourceVersion[this.hudAgentProperty] = serverPackageJson[this.hudAgentProperty] || serverPackageJson[this.hudAgentPathProperty];
    };
    VersionInfoService.prototype.discoverDependenciesVersions = function () {
        var commonPackageJson = this.packageHelper.getPackage(this.packageHelper.findGlimpseCommonPackageJsonPath());
        this.dependenciesVersion[commonPackageJson.name] = commonPackageJson.version;
    };
    VersionInfoService.prototype.discoverServerVersions = function () {
        var serverPackageJson = this.getServerPackage();
        this.serverVersion[serverPackageJson.name] = serverPackageJson.version;
    };
    Object.defineProperty(VersionInfoService.prototype, "allInfo", {
        /**
         * Returns object containing version info for all (resource, dependencies, server
         * & agent) system components.
         */
        get: function () {
            return _.assign({}, this.resourceVersion, this.agentVersions, this.serverVersion, this.dependenciesVersion);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionInfoService.prototype, "resourceInfo", {
        /**
         * Returns object containing version info for just the registered resources (client,
         * hud & browser agent).
         */
        get: function () {
            return this.resourceVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionInfoService.prototype, "dependenciesInfo", {
        /**
         * Returns object containing version info for just the major common dependencies
         * (for instance Glimpse.Common).
         */
        get: function () {
            return this.dependenciesVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionInfoService.prototype, "serverInfo", {
        /**
         * Returns object containing version info for just the Glimpse Server.
         */
        get: function () {
            return this.serverVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionInfoService.prototype, "agentInfo", {
        /**
         * Returns object containing version info for any registered Glimpse server side Agents.
         */
        get: function () {
            return this.agentVersions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Lets Glimpse server side Agents to have their version info be explicitly registered.
     */
    VersionInfoService.prototype.registerAgent = function (name, version) {
        this.agentVersions[name] = version;
    };
    return VersionInfoService;
}());
exports.VersionInfoService = VersionInfoService;

//# sourceMappingURL=../../../maps/src/version/VersionInfoService.js.map
