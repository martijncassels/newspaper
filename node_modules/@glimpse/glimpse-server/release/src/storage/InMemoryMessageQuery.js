'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var IMessageStorageContext_1 = require("./IMessageStorageContext");
var _ = require("lodash");
var moment = require("moment");
var InMemoryMessageQuery = (function () {
    function InMemoryMessageQuery(storage) {
        this.storage = storage;
    }
    InMemoryMessageQuery.prototype.queryMessages = function (contextId, types) {
        var typeFilter = function (message) { return _.intersection(message.types, types).length > 0; };
        if (contextId) {
            var context_1 = this.storage.contexts[contextId];
            if (context_1) {
                return (types && types.length > 0) ? _.filter(context_1.messages, typeFilter) : context_1.messages;
            }
            else {
                return [];
            }
        }
        else {
            return _(this.storage.contexts)
                .values()
                .map(function (context) { return types ? _.filter(context.messages, typeFilter) : context.messages; })
                .flatten()
                .value();
        }
    };
    InMemoryMessageQuery.prototype.queryRequests = function (filters, types) {
        var requests = _(this.storage.contexts)
            .values()
            .filter(function (context) { return context.type === IMessageStorageContext_1.MessageStorageContextType.Request; })
            .map(function (context) { return context; });
        if (filters) {
            if (filters.durationMaximum) {
                requests = requests.filter(function (request) { return request.indices.duration && request.indices.duration <= filters.durationMaximum; });
            }
            if (filters.durationMinimum) {
                requests = requests.filter(function (request) { return request.indices.duration && request.indices.duration >= filters.durationMinimum; });
            }
            if (filters.urlContains) {
                requests = requests.filter(function (request) { return request.indices.url && request.indices.url.search(filters.urlContains) >= 0; });
            }
            if (filters.methodList && filters.methodList.length > 0) {
                requests = requests.filter(function (request) { return request.indices.method && filters.methodList.some(function (method) { return method === request.indices.method; }); });
            }
            if (filters.tagList && filters.tagList.length > 0) {
                requests = requests.filter(function (request) { return request.indices.tags && _.intersection(request.indices.tags, filters.tagList).length > 0; });
            }
            if (filters.statusCodeMinimum) {
                requests = requests.filter(function (request) { return request.indices.statusCode && request.indices.statusCode >= filters.statusCodeMinimum; });
            }
            if (filters.statusCodeMaximum) {
                requests = requests.filter(function (request) { return request.indices.statusCode && request.indices.statusCode <= filters.statusCodeMaximum; });
            }
            if (filters.requestTimeBefore) {
                requests = requests.filter(function (request) { return request.indices.dateTime && request.indices.dateTime.isBefore(filters.requestTimeBefore); });
            }
            if (filters.userId) {
                requests = requests.filter(function (request) { return request.indices.userId && request.indices.userId.toLowerCase() === filters.userId.toLowerCase(); });
            }
        }
        var messages = requests
            .orderBy(function (request) { return (request.indices.dateTime ? request.indices.dateTime : moment(0)).valueOf(); }, 'desc')
            .take(InMemoryMessageQuery.MAX_REQUESTS_PER_PAGE)
            .map(function (request) { return request.messages; })
            .flatten();
        if (types) {
            messages = messages.filter(function (message) { return _.intersection(message.types, types).length > 0; });
        }
        return messages.value();
    };
    return InMemoryMessageQuery;
}());
InMemoryMessageQuery.MAX_REQUESTS_PER_PAGE = 50;
exports.InMemoryMessageQuery = InMemoryMessageQuery;

//# sourceMappingURL=../../../maps/src/storage/InMemoryMessageQuery.js.map
