'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var InMemoryMessageStorageContext_1 = require("./InMemoryMessageStorageContext");
var InMemoryRequestStorageContext_1 = require("./InMemoryRequestStorageContext");
var IMessageStorageContext_1 = require("./IMessageStorageContext");
var lru = require("lru-cache");
var InMemoryMessageStorage = (function () {
    function InMemoryMessageStorage(maxContexts) {
        var _this = this;
        this.contexts = {};
        this.cache = lru({
            max: maxContexts || InMemoryMessageStorage.MAX_CONTEXTS,
            dispose: function (key) { return delete _this.contexts[key]; }
        });
    }
    InMemoryMessageStorage.prototype.persist = function (message) {
        var contextId = message.context.id;
        var context = this.cache.get(contextId);
        if (!context) {
            if (message.context.type.toLowerCase() === InMemoryMessageStorage.REQUEST_CONTEXT_TYPE) {
                context = new InMemoryRequestStorageContext_1.InMemoryRequestStorageContext();
            }
            else {
                context = new InMemoryMessageStorageContext_1.InMemoryMessageStorageContext(IMessageStorageContext_1.MessageStorageContextType.Generic);
            }
            this.cache.set(contextId, context);
            this.contexts[contextId] = context;
        }
        context.persist(message);
    };
    return InMemoryMessageStorage;
}());
InMemoryMessageStorage.MAX_CONTEXTS = 500;
InMemoryMessageStorage.REQUEST_CONTEXT_TYPE = 'request';
exports.InMemoryMessageStorage = InMemoryMessageStorage;

//# sourceMappingURL=../../../maps/src/storage/InMemoryMessageStorage.js.map
