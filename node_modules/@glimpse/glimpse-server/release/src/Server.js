'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var MessagePublisher_1 = require("./messaging/MessagePublisher");
var InMemoryMessageQuery_1 = require("./storage/InMemoryMessageQuery");
var InMemoryMessageStorage_1 = require("./storage/InMemoryMessageStorage");
var ResourceAuthorization_1 = require("./resources/ResourceAuthorization");
var ResourceManager_1 = require("./resources/ResourceManager");
var VersionInfoService_1 = require("./version/VersionInfoService");
var glimpse_common_1 = require("@glimpse/glimpse-common");
var glimpse_common_2 = require("@glimpse/glimpse-common");
var glimpse_common_3 = require("@glimpse/glimpse-common");
var path = require("path");
var resources = [
    'Context',
    'ExportConfig',
    'MessageDebug',
    'MessageHistory',
    'MessageIngress',
    'MessageStream',
    'Metadata',
    'RequestHistory',
    'TelemetryConfig',
    'AgentEmbedded',
    'HudEmbedded',
    'ClientEmbeddedDefault',
    'ClientEmbeddedDev',
    'ClientEmbeddedProd'
];
var Server = (function () {
    function Server() {
        this._messageStorage = new InMemoryMessageStorage_1.InMemoryMessageStorage();
        this._messagePublisher = new MessagePublisher_1.MessagePublisher(this._messageStorage);
        this._messageQuery = new InMemoryMessageQuery_1.InMemoryMessageQuery(this._messageStorage);
        this._resourceAuthorization = new ResourceAuthorization_1.ResourceAuthorization();
        this._resourceManager = new ResourceManager_1.ResourceManager();
        var localSettingsFile = glimpse_common_1.ConfigSettings.findFile(__dirname, 'glimpse.config.json');
        var defaultSettings = path.join(__dirname, 'glimpse.server.default.config.json');
        var commandLineArgs = glimpse_common_1.ConfigSettings.filterCommandLineArgs('--GLIMPSE_');
        this._configSettings = new glimpse_common_1.ConfigSettings(commandLineArgs, 'GLIMPSE_', localSettingsFile, defaultSettings);
        var telemetryConfig = glimpse_common_2.getTelemetryConfig(this._configSettings);
        this._telemetryService = new glimpse_common_2.TelemetryService(glimpse_common_2.GlimpseComponentType.NODE_SERVER, telemetryConfig);
        this._errorReportingService = new glimpse_common_3.CompositeErrorReportingService([new glimpse_common_3.LoggingErrorReportingService(), new glimpse_common_3.TelemetryErrorReportingService(this._telemetryService)]);
        this._versionInfoService = new VersionInfoService_1.VersionInfoService(glimpse_common_3.PackageHelper.instance);
        this.providers = {
            messagePublisher: this._messagePublisher,
            messageQuery: this._messageQuery,
            resourceAuthorization: this._resourceAuthorization,
            resourceManager: this._resourceManager,
            telemetryService: this._telemetryService,
            configSettings: this._configSettings,
            errorReportingService: this._errorReportingService,
            versionInfoService: this._versionInfoService,
            // TODO: Set this properly once the resource provider has been converted to TypeScript.
            resourceProvider: undefined
        };
    }
    Server.prototype.init = function () {
        this.registerResources();
        this.sendServerInitEvent();
    };
    Server.prototype.registerResources = function () {
        for (var i = 0; i < resources.length; i++) {
            var resourceModule = require('./resources/' + resources[i] + 'Resource');
            var resourceFactory = resourceModule.Resource;
            var resource = new resourceFactory(this);
            this._resourceManager.register(resource);
        }
    };
    Server.prototype.sendServerInitEvent = function () {
        var props = {};
        var appData = glimpse_common_2.getTelemetryAppInstanceData(this._configSettings);
        for (var p in appData) {
            if (appData.hasOwnProperty(p)) {
                props[p] = appData[p];
            }
        }
        var measurements = {};
        this._telemetryService.sendEvent(glimpse_common_2.TelemetryEvents.NODE_SERVER_INIT, props, measurements);
    };
    return Server;
}());
exports.Server = Server;
exports.instance = new Server();

//# sourceMappingURL=../../maps/src/Server.js.map
