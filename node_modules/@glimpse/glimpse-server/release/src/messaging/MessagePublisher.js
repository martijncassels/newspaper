'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var MessagePublisher = (function () {
    function MessagePublisher(messageStorage) {
        this._subscriptions = [];
        this._messageStorage = messageStorage;
    }
    MessagePublisher.prototype.publishMessages = function (messages) {
        var _this = this;
        messages.forEach(function (message) { return _this.publishMessage(message); });
    };
    MessagePublisher.prototype.streamMessages = function (contextId, types, callback) {
        var _this = this;
        var entry;
        entry = {
            contextId: contextId,
            types: types,
            callback: callback,
            done: function () {
                var index = _this._subscriptions.indexOf(entry);
                if (index >= 0) {
                    _this._subscriptions.splice(index, 1);
                }
            }
        };
        this._subscriptions.push(entry);
        return entry;
    };
    MessagePublisher.prototype.publishMessage = function (message) {
        this._messageStorage.persist(message);
        // NOTE: We copy the array in case subscriptions are removed during the callback.
        var subscriptions = this._subscriptions.slice();
        subscriptions.forEach(function (subscription) {
            if (subscription.types && subscription.types.length > 0 && _.intersection(subscription.types, message.types).length === 0) {
                return;
            }
            if (subscription.contextId && message.context.id !== subscription.contextId) {
                return;
            }
            subscription.callback(undefined, message);
        });
    };
    return MessagePublisher;
}());
exports.MessagePublisher = MessagePublisher;

//# sourceMappingURL=../../../maps/src/messaging/MessagePublisher.js.map
