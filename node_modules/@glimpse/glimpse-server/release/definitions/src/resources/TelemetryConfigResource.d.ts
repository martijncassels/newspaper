import { IResource } from './IResource';
import { IServer } from '../IServer';
import { ITelemetryConfig } from '@glimpse/glimpse-common';
/**
 *  Shape of telemetry config resource returned from the server.
 */
export interface IClientTelemetryInfo extends ITelemetryConfig {
    /** IP address of the glimpse client as observed by the glimpse server */
    clientIP: string;
    /** server's telemetry session ID to correlate client telemetry events with server telemetry events */
    serverSessionId: string;
    /** serverGlimpseVersion */
    serverGlimpseVersion: string;
    /** unique ID for the machine hosting the server.  This is a SHA256 hash of the machine's mac address. */
    serverMachineId: string;
    /** name of the application hosting the glimpse.server */
    serverAppName: string;
    /** OS Platform where server is running */
    serverOSPlatform: string;
    /** OS Release where server is running */
    serverOSRelease: string;
    /** OS Type where server is running */
    serverOSType: string;
    /** version of the runtime where the server is running */
    serverRuntimeVersion: string;
    /** name of the runtime where the server is running */
    serverRuntimeName: string;
}
/**
 * Resource for telemetry configuration details to enable client to send telemetry data.
 *
 * Microsoft values privacy.  For details, please see our privacy
 * statement at http://go.microsoft.com/fwlink/?LinkId=521839&CLCID=0409.
 */
export declare class Resource implements IResource {
    name: string;
    templateName: string;
    uriTemplate: string;
    type: string;
    private appInstanceData;
    private telemetryConfig;
    private serverTelemetrySessionId;
    constructor(server: IServer);
    /**
     *  returns an ITelemetryConfig object with the appropriate values.
     */
    createTelemetryConfig(clientIP: string): IClientTelemetryInfo;
    /**
     * Invoke the resource
     */
    invoke(req: any, res: any): void;
}
