'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
// load context manager first so we can avoid modules getting loaded before we have a chance to overwrite calls for async context tracking
var ContextManagerProvider_1 = require("./messaging/ContextManagerProvider");
var cm = ContextManagerProvider_1.ContextManagerProvider.getContextManager();
var AgentBroker_1 = require("./messaging/AgentBroker");
var DeferredInitializationManager_1 = require("./DeferredInitializationManager");
var MessagePublisher_1 = require("./messaging/MessagePublisher");
var MessageConverter_1 = require("./messaging/MessageConverter");
var ResourceProvider_1 = require("./configuration/ResourceProvider");
var glimpse_common_1 = require("@glimpse/glimpse-common");
var ModuleManager_1 = require("./tracing/ModuleManager");
var glimpse_common_2 = require("@glimpse/glimpse-common");
var glimpse_common_3 = require("@glimpse/glimpse-common");
var glimpse_common_4 = require("@glimpse/glimpse-common");
var StackHelper_1 = require("./inspectors/util/StackHelper");
var NoContextTelemetryService_1 = require("./util/NoContextTelemetryService");
// instrumentors
var ConsoleModuleInstrumentor_1 = require("./tracing/module_instrumentors/ConsoleModuleInstrumentor");
var HttpModuleInstrumentor_1 = require("./tracing/module_instrumentors/HttpModuleInstrumentor");
var ExpressModuleInstrumentor_1 = require("./tracing/module_instrumentors/ExpressModuleInstrumentor");
var MongoDBModuleInstrumentor_1 = require("./tracing/module_instrumentors/MongoDBModuleInstrumentor");
var MongoDBCoreModuleInstrumentor_1 = require("./tracing/module_instrumentors/MongoDBCoreModuleInstrumentor");
var KnexModuleInstrumentor_1 = require("./tracing/module_instrumentors/KnexModuleInstrumentor");
var MorganModuleInstrumentor_1 = require("./tracing/module_instrumentors/MorganModuleInstrumentor");
var BodyParserModuleInstrumentor_1 = require("./tracing/module_instrumentors/BodyParserModuleInstrumentor");
var CookieParserModuleInstrumentor_1 = require("./tracing/module_instrumentors/CookieParserModuleInstrumentor");
// inspectors
var ExpressInspectorActionRouteView_1 = require("./inspectors/ExpressInspectorActionRouteView");
var ExpressInspectorMiddleware_1 = require("./inspectors/ExpressInspectorMiddleware");
var MongoDBInspector_1 = require("./inspectors/MongoDBInspector");
var MongoDBCoreInspector_1 = require("./inspectors/MongoDBCoreInspector");
var ClientRequestInspector_1 = require("./inspectors/ClientRequestInspector");
var DateTime_1 = require("./configuration/DateTime");
var ScriptManager_1 = require("./messaging/ScriptManager");
var RequireAnalyzer_1 = require("./configuration/RequireAnalyzer");
var path = require("path");
function createGlobalNodeAgent() {
    if (isNodeAgentCreated()) {
        throw new Error('Glimpse Node Agent has already been created.  Only one is allowed per process.');
    }
    else {
        var agent = new Agent();
        // tslint:disable-next-line:no-any
        global.__glimpse_node_agent = agent;
        return agent;
    }
}
exports.createGlobalNodeAgent = createGlobalNodeAgent;
function isNodeAgentCreated() {
    // we use a global variable instead of something module-scoped so we can throw
    // when  a user tries to load glimpse from different versions.
    // tslint:disable-next-line:no-any
    return !!global.__glimpse_node_agent;
}
exports.isNodeAgentCreated = isNodeAgentCreated;
var Agent = (function () {
    function Agent() {
        this._contextManager = cm;
        this._resourceProvider = new ResourceProvider_1.ResourceProvider();
        this._messagePublisher = new MessagePublisher_1.MessagePublisher(this._resourceProvider);
        var commandLineArgs = glimpse_common_3.ConfigSettings.filterCommandLineArgs('--GLIMPSE_');
        var localSettingsFile = glimpse_common_3.ConfigSettings.findFile('./', 'glimpse.config.json');
        var defaultSettings = path.join(__dirname, 'glimpse.agent.default.config.json');
        var configSettings = new glimpse_common_3.ConfigSettings(commandLineArgs, 'GLIMPSE_', localSettingsFile, defaultSettings);
        var telemetryConfig = glimpse_common_4.getTelemetryConfig(configSettings);
        this._telemetryService = new NoContextTelemetryService_1.NoContextTelemetryService(new glimpse_common_4.TelemetryService(glimpse_common_4.GlimpseComponentType.NODE_AGENT, telemetryConfig));
        this._errorReportingService = new glimpse_common_1.CompositeErrorReportingService([new glimpse_common_1.LoggingErrorReportingService(), new glimpse_common_1.TelemetryErrorReportingService(this._telemetryService)]);
        this._stackHelper = new StackHelper_1.StackHelper(this._errorReportingService);
        var dateTimeService = new DateTime_1.DateTime();
        this._providers = {
            contextManager: this._contextManager,
            dateTime: dateTimeService,
            deferredInitializationManager: new DeferredInitializationManager_1.DeferredInitializationManager(),
            errorReportingService: this._errorReportingService,
            messagePublisher: this._messagePublisher,
            resourceProvider: this._resourceProvider,
            scriptManager: new ScriptManager_1.ScriptManager(this._contextManager, this._resourceProvider),
            configSettings: configSettings,
            telemetryService: this._telemetryService,
            stackHelper: this._stackHelper,
            messageConverter: new MessageConverter_1.MessageConverter(dateTimeService)
        };
        this._broker = new AgentBroker_1.AgentBroker(this);
        this._contextManager.setServices(this._providers);
    }
    Object.defineProperty(Agent.prototype, "broker", {
        get: function () {
            return this._broker;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Agent.prototype, "providers", {
        get: function () {
            return this._providers;
        },
        enumerable: true,
        configurable: true
    });
    Agent.prototype.init = function (options) {
        this.validateReferencedPackages();
        // Initialize the inspectors
        new ExpressInspectorActionRouteView_1.ExpressInspectorActionRouteView().init(this._broker, this._contextManager, this._providers.dateTime, this._providers.errorReportingService, this._providers.scriptManager);
        new ExpressInspectorMiddleware_1.ExpressInspectorMiddleware().init(this._broker, this._providers);
        new MongoDBInspector_1.MongoDBInspector().init(this);
        new MongoDBCoreInspector_1.MongoDBCoreInspector().init(this);
        new ClientRequestInspector_1.ClientRequestInspector().init(this, this._providers.errorReportingService);
        // Setup the Module Manager
        var moduleManager = new ModuleManager_1.ModuleManager();
        moduleManager.setErrorReportingService(this._errorReportingService);
        moduleManager.init(this, require('module'));
        // always load console instrumentation manager and underlying proxy
        // first since we need to trap console methods before console module
        // gets loaded
        moduleManager.addModuleInstrumentor(new ConsoleModuleInstrumentor_1.ConsoleModuleInstrumentor());
        require('console'); // Force load console instrumentation
        // Load the rest of the instrumentation managers
        moduleManager.addModuleInstrumentor(new HttpModuleInstrumentor_1.HttpModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new ExpressModuleInstrumentor_1.ExpressModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new MongoDBCoreModuleInstrumentor_1.MongoDBCoreModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new MongoDBModuleInstrumentor_1.MongoDBModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new KnexModuleInstrumentor_1.KnexModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new MorganModuleInstrumentor_1.MorganModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new BodyParserModuleInstrumentor_1.BodyParserModuleInstrumentor());
        moduleManager.addModuleInstrumentor(new CookieParserModuleInstrumentor_1.CookieParserModuleInstrumentor());
        // Notify server of agent version
        if (options.server) {
            var packageHelper = glimpse_common_1.PackageHelper.instance;
            var packageJson = packageHelper.getPackageFromChildPath(__dirname);
            options.server.providers.versionInfoService.registerAgent(packageJson.name, packageJson.version);
        }
        else {
            glimpse_common_1.printBannerGreeting();
        }
        this._resourceProvider.init(this._contextManager, this.providers.deferredInitializationManager, options);
        this._messagePublisher.init(options);
        this.sendAgentInitEvent();
    };
    Agent.prototype.sendAgentInitEvent = function () {
        var props = {};
        var appData = glimpse_common_4.getTelemetryAppInstanceData(this.providers.configSettings);
        for (var p in appData) {
            if (appData.hasOwnProperty(p)) {
                props[p] = appData[p];
            }
        }
        var measurements = {};
        this._telemetryService.sendEvent(glimpse_common_4.TelemetryEvents.NODE_AGENT_INIT, props, measurements);
    };
    Agent.prototype.validateReferencedPackages = function () {
        var _this = this;
        if (this.providers.configSettings.getBoolean('agent.validate-packages.enabled', true)) {
            var excludedPackages = this.providers.configSettings.get('agent.validate-packages.excludedPackages', []);
            var packageNames = RequireAnalyzer_1.RequireAnalyzer.getReferencedPackageNames(require.cache, excludedPackages);
            if (packageNames.length > 0) {
                packageNames.forEach(function (packageName) {
                    _this.providers.errorReportingService.reportError(glimpse_common_2.createPackageRequiredBeforeInitError(packageName));
                });
            }
        }
    };
    return Agent;
}());

//# sourceMappingURL=../maps/Agent.js.map
