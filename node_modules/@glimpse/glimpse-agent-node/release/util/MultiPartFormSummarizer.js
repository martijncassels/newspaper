"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HttpHelper_1 = require("./HttpHelper");
var Dicer = require("dicer");
var MultiPartFormParser_1 = require("./MultiPartFormParser");
function createMultiPartFormSummarizer(contentTypeHeader) {
    var contentType = HttpHelper_1.HttpHelper.parseContentType(contentTypeHeader);
    if (HttpHelper_1.HttpHelper.isMultiPartFormData(contentType)) {
        var boundary = HttpHelper_1.HttpHelper.getMultiPartFormBoundary(contentType);
        if (boundary && HttpHelper_1.HttpHelper.isValidBoundary(boundary)) {
            //return new DicerSummarizer(boundary);
            return new CustomParserMultiPartSummarizer(boundary);
        }
    }
    return undefined;
}
exports.createMultiPartFormSummarizer = createMultiPartFormSummarizer;
function validateBoundary(boundary) {
    if (!HttpHelper_1.HttpHelper.isValidBoundary(boundary)) {
        throw new Error('boundary is not valid.  Boundary must be between 1 & 70 characters in length');
    }
}
/**
 * IMultiPartFormSummarizer that uses dicer parser for multi-part form summaries
 */
var DicerMultiPartSummarizer = (function () {
    function DicerMultiPartSummarizer(boundary) {
        var _this = this;
        this.partSummaries = [];
        this.failed = false;
        validateBoundary(boundary);
        this.dicer = new Dicer({ boundary: boundary });
        this.dicer.on('part', function (part) {
            var partSummary = { headers: {} };
            _this.partSummaries.push(partSummary);
            part.on('header', function (headers) {
                partSummary.headers = headers;
            });
            // part.on('data', (partData) => {
            //     partSummary.length = partData.length;
            // });
        });
    }
    DicerMultiPartSummarizer.prototype.addChunk = function (chunk) {
        if (!this.failed) {
            try {
                this.dicer.write(chunk);
            }
            catch (err) {
                // dicer doesn't handle some input gracefully (e.g., whitespace after a boundary)
                // swallow exceptions here, and just forget about getting any part summaries.
                // primary thing is we don't blow up the request because we can't parse the input
                this.failed = true;
            }
        }
    };
    DicerMultiPartSummarizer.prototype.getParts = function () {
        return this.partSummaries;
    };
    return DicerMultiPartSummarizer;
}());
exports.DicerMultiPartSummarizer = DicerMultiPartSummarizer;
/**
 * MultiPartFormSummarizer that uses custom parser for multi-part form summaries
 */
var CustomParserMultiPartSummarizer = (function () {
    function CustomParserMultiPartSummarizer(boundary) {
        validateBoundary(boundary);
        this.parser = new MultiPartFormParser_1.MultiPartFormParser(boundary, 'utf8');
    }
    CustomParserMultiPartSummarizer.prototype.addChunk = function (chunk) {
        this.parser.addChunk(chunk);
    };
    CustomParserMultiPartSummarizer.prototype.getParts = function () {
        var _this = this;
        var summaries = this.parser.getParts().map(function (s) {
            return {
                headers: _this.convertRawHeaders(s.rawHeaders),
                bodyStartIndex: s.bodyStartIndex,
                bodyEndIndex: s.bodyEndIndex,
                bodyLength: s.bodyEndIndex - s.bodyStartIndex
            };
        });
        return summaries;
    };
    CustomParserMultiPartSummarizer.prototype.convertRawHeaders = function (rawHeaders) {
        var h = {};
        rawHeaders = rawHeaders.trim();
        var lines = rawHeaders.split('\r\n');
        lines.forEach(function (l) {
            var idx = l.indexOf(':');
            if (idx > 0) {
                var name_1 = l.substring(0, idx).trim().toLowerCase();
                var value = l.substring(idx + 1, l.length).trim();
                if (!h[name_1]) {
                    h[name_1] = [];
                }
                h[name_1].push(value);
            }
        });
        return h;
    };
    return CustomParserMultiPartSummarizer;
}());
exports.CustomParserMultiPartSummarizer = CustomParserMultiPartSummarizer;

//# sourceMappingURL=../../maps/util/MultiPartFormSummarizer.js.map
