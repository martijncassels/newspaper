"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A component for managing deferred, asynchronous initialization.
 */
var DeferredInitializationManager = (function () {
    function DeferredInitializationManager() {
        this.registered = [];
        this.state = 'NOT_INITIALIZED';
        this.waiters = [];
    }
    /**
     * Called when deferred initialization should be performed.
     *
     * NOTE: This should ideally be called once, prior to the first request being received.
     *
     * @param done A callback called when initialization is complete.
     */
    DeferredInitializationManager.prototype.init = function (done) {
        if (this.state === 'INITIALIZED') {
            // Initialization is complete so just immediately invoke the callback...
            return done(this.err);
        }
        // Initialization has not started or is ongoing, so wait for completion...
        this.waiters.push(done);
        if (this.state === 'NOT_INITIALIZED') {
            // This is the first call to init() so kick off initialization...
            this.performInitialization();
        }
    };
    /**
     * Register a callback to be invoked when deferred initialization is to be performed.
     *
     * @param init The callback to be invoked during initialization.
     */
    DeferredInitializationManager.prototype.onInit = function (init) {
        if (this.state !== 'NOT_INITIALIZED') {
            throw new Error('onInit() must be called prior to the start of initialization.');
        }
        this.registered.push(init);
    };
    DeferredInitializationManager.prototype.performInitialization = function () {
        var _this = this;
        this.state = 'INITIALIZING';
        // TODO: Consider running each in parallel?
        var loop = function () {
            if (_this.registered.length) {
                var current = _this.registered.shift();
                return current(function (err) {
                    if (err) {
                        return _this.completeInitialization(err);
                    }
                    loop();
                });
            }
            _this.completeInitialization(undefined);
        };
        loop();
    };
    DeferredInitializationManager.prototype.completeInitialization = function (err) {
        this.err = err;
        this.state = 'INITIALIZED';
        while (this.waiters.length) {
            var waiter = this.waiters.shift();
            waiter(this.err);
        }
    };
    return DeferredInitializationManager;
}());
exports.DeferredInitializationManager = DeferredInitializationManager;
exports.default = DeferredInitializationManager;

//# sourceMappingURL=../maps/DeferredInitializationManager.js.map
