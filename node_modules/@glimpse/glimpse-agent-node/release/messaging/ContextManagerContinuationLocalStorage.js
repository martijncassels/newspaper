'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ContextManagerBase_1 = require("./ContextManagerBase");
/*tslint:disable:no-var-requires */
var cls = require('continuation-local-storage');
/*tslint:enable:no-var-requires */
var ContextManagerContinuationLocalStorage = (function (_super) {
    __extends(ContextManagerContinuationLocalStorage, _super);
    function ContextManagerContinuationLocalStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextManagerContinuationLocalStorage.prototype.init = function () {
        _super.prototype.init.call(this);
        this._namespace = cls.createNamespace(ContextManagerContinuationLocalStorage.GLIMPSE_NAMESPACE);
    };
    ;
    // tslint:disable-next-line:no-any
    ContextManagerContinuationLocalStorage.prototype.runInContext = function (context, callback) {
        var _this = this;
        var wrapper = function () {
            _this._namespace.set(ContextManagerContinuationLocalStorage.GLIMPSE_CONTEXT, context);
            return callback(context);
        };
        var boundFunction = this._namespace.bind(wrapper, this._namespace.createContext());
        return boundFunction();
    };
    ;
    // tslint:disable-next-line:no-any
    ContextManagerContinuationLocalStorage.prototype.runInNewContext = function (req, callback) {
        return this.runInContext(this.createContext(req), callback);
    };
    ;
    // tslint:disable-next-line:no-any
    ContextManagerContinuationLocalStorage.prototype.runInNullContext = function (callback) {
        return this.runInContext(undefined, callback);
    };
    ;
    ContextManagerContinuationLocalStorage.prototype.wrapInCurrentContext = function (callback) {
        return this._namespace.bind(callback, this._namespace.active);
    };
    ContextManagerContinuationLocalStorage.prototype.currentContext = function () {
        if (this._namespace.active) {
            return this._namespace.get(ContextManagerContinuationLocalStorage.GLIMPSE_CONTEXT);
        }
        else {
            return undefined;
        }
    };
    ;
    return ContextManagerContinuationLocalStorage;
}(ContextManagerBase_1.ContextManagerBase));
ContextManagerContinuationLocalStorage.GLIMPSE_NAMESPACE = 'GLIMPSE_NAMESPACE';
ContextManagerContinuationLocalStorage.GLIMPSE_CONTEXT = 'GLIMPSE_CONTEXT';
exports.ContextManagerContinuationLocalStorage = ContextManagerContinuationLocalStorage;

//# sourceMappingURL=../../maps/messaging/ContextManagerContinuationLocalStorage.js.map
