'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var GuidHelper_1 = require("./../util/GuidHelper");
var MessageConverter = (function () {
    function MessageConverter(dateTimeService) {
        this.dateTimeService = dateTimeService;
    }
    MessageConverter.prototype.createMessage = function (data, types, indices, context) {
        var message = this.createMessageEnvelope(types, indices, context);
        var transformedMessage = this.transformMessageForTransit(message, data);
        return transformedMessage;
    };
    ;
    MessageConverter.prototype.transformMessageForTransit = function (message, data) {
        var payload = {
            id: message.id,
            payload: data,
            ordinal: message.ordinal,
            context: message.context,
            types: message.types,
            agent: message.agent,
            offset: message.offset
        };
        var transformedMessage = {
            context: message.context,
            id: message.id,
            ordinal: message.ordinal,
            payload: undefined,
            types: message.types,
            offset: message.offset,
            sent: message.sent,
            agent: message.agent
        };
        // don't include undefined properties, or they won't pass json schema validation
        if (message.indices) {
            transformedMessage.indices = message.indices;
        }
        transformedMessage.payload = JSON.stringify(payload);
        return transformedMessage;
    };
    MessageConverter.prototype.createMessageEnvelope = function (types, indices, context) {
        var message = {
            id: GuidHelper_1.GuidHelper.newGuid(false),
            context: {
                id: context.id,
                type: context.type
            },
            ordinal: ++MessageConverter.i,
            types: types,
            offset: this.dateTimeService.now.diff(context.startTime),
            payload: undefined,
            agent: { source: 'server' },
            sent: false
        };
        // don't include undefined properties, or they won't pass json schema validation
        if (indices) {
            message.indices = indices;
        }
        return message;
    };
    return MessageConverter;
}());
MessageConverter.i = 0;
exports.MessageConverter = MessageConverter;

//# sourceMappingURL=../../maps/messaging/MessageConverter.js.map
