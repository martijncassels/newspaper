'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var GuidHelper_1 = require("./../util/GuidHelper");
var glimpse_common_1 = require("@glimpse/glimpse-common");
var ContextManagerBase = (function () {
    function ContextManagerBase() {
    }
    ContextManagerBase.prototype.init = function () {
        //no-op
    };
    ContextManagerBase.prototype.createContext = function (req) {
        var context = {
            id: GuidHelper_1.GuidHelper.newGuid(false),
            type: 'Request',
            startTime: this.dateTimeService.now,
            req: req
        };
        return context;
    };
    ;
    ContextManagerBase.prototype.isWithinContext = function () {
        return (this.currentContext() ? true : false);
    };
    ContextManagerBase.prototype.currentContext = function () {
        throw new Error('please override');
    };
    ContextManagerBase.prototype.runInContext = function (context, callback) {
        throw new Error('please override');
    };
    ContextManagerBase.prototype.runInNewContext = function (req, callback) {
        throw new Error('please override');
    };
    ContextManagerBase.prototype.runInNullContext = function (callback) {
        throw new Error('please override');
    };
    ContextManagerBase.prototype.wrapInCurrentContext = function (callback) {
        return callback;
    };
    ContextManagerBase.prototype.checkContextID = function (location, expectedContextID) {
        var currentContext = this.currentContext();
        if (expectedContextID) {
            var currentContextID = currentContext ? currentContext.id : undefined;
            if (currentContextID !== expectedContextID) {
                if (this.errorReportingService) {
                    this.errorReportingService.reportError(glimpse_common_1.createUnexpectedContextError(), location, expectedContextID, currentContextID);
                }
            }
        }
        else if (!currentContext) {
            if (this.errorReportingService) {
                this.errorReportingService.reportError(glimpse_common_1.createNoContextError(), location);
            }
        }
    };
    ContextManagerBase.prototype.setServices = function (service) {
        this.errorReportingService = service.errorReportingService;
        this.dateTimeService = service.dateTime;
    };
    ContextManagerBase.prototype.getErrorReportingService = function () {
        return this.errorReportingService;
    };
    return ContextManagerBase;
}());
exports.ContextManagerBase = ContextManagerBase;

//# sourceMappingURL=../../maps/messaging/ContextManagerBase.js.map
