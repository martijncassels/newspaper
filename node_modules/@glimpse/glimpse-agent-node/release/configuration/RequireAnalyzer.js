"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
/**
 * Provides analysis of loaded Node modules.
 */
var RequireAnalyzer = (function () {
    function RequireAnalyzer() {
    }
    /**
     * Gets a list package names, directly referenced by the application, that resulted in a set of modules being loaded.
     *
     * @nodeModules - A set of loaded Node modules, mapped by ID.
     * @excludedModules - Packages which should be excluded from the resulting list
     */
    RequireAnalyzer.getReferencedPackageNames = function (nodeModules, excludedPackages) {
        var excludedPackageNames = [RequireAnalyzer.applicationPackageName].concat(excludedPackages.map(function (parentModule) { return parentModule.packageName; }));
        var parentModuleCache = {};
        return _(nodeModules)
            .values()
            .map(function (nodeModule) { return RequireAnalyzer.getReferencedPackageName(nodeModule, excludedPackages, parentModuleCache); })
            .uniq()
            .filter(function (pkg) { return !_.includes(excludedPackageNames, pkg); })
            .value();
    };
    /**
     * Gets the package name, directly referenced by the application, that resulted in a module being loaded.
     *
     * @nodeModule - A loaded Node module.
     * @knownModules - Packages which are specifically known (e.g. have custom filename matching)
     */
    RequireAnalyzer.getReferencedPackageName = function (nodeModule, knownModules, parentModuleCache) {
        if (knownModules === void 0) { knownModules = []; }
        if (parentModuleCache === void 0) { parentModuleCache = {}; }
        if (nodeModule) {
            // See if the cache already contains the package name...
            var packageName = parentModuleCache[nodeModule.id];
            if (packageName === undefined) {
                // No cached value, so see if the cache already contains the package name for the parent...
                packageName = RequireAnalyzer.getReferencedPackageName(nodeModule.parent, knownModules, parentModuleCache);
                if (packageName === RequireAnalyzer.applicationPackageName) {
                    // This module (or its parent) was directly referenced by the application; 
                    // see if this module represents a "known" package entrypoint...
                    var filename = nodeModule.filename.replace(/\\/g, '/').toLowerCase();
                    for (var i = 0; i < knownModules.length; i++) {
                        var parentModule = knownModules[i];
                        if (parentModule.match) {
                            var match = parentModule.match.replace(/\\/g, '/').toLowerCase();
                            if (_.endsWith(filename, match)) {
                                packageName = parentModule.packageName;
                                break;
                            }
                        }
                    }
                    if (packageName === RequireAnalyzer.applicationPackageName) {
                        // This module (or its parent) was directly referenced by the application; 
                        // see if this module represents a package entrypoint...
                        var nodeModuleString = '/node_modules/';
                        var nodeModulesIndex = filename.lastIndexOf(nodeModuleString);
                        if (nodeModulesIndex >= 0) {
                            var endOfScopeOrPackageIndex = filename.indexOf('/', nodeModulesIndex + nodeModuleString.length);
                            if (endOfScopeOrPackageIndex >= 0) {
                                packageName = filename.substring(nodeModulesIndex + nodeModuleString.length, endOfScopeOrPackageIndex);
                                if (packageName.length > 0 && packageName[0] === '@') {
                                    // The packageName is actually a package scope; find the package name...
                                    var endOfPackageIndex = filename.indexOf('/', endOfScopeOrPackageIndex + 1);
                                    if (endOfPackageIndex >= 0) {
                                        packageName += '/' + filename.substring(endOfScopeOrPackageIndex + 1, endOfPackageIndex);
                                    }
                                }
                            }
                            else {
                                packageName = nodeModule.filename;
                            }
                        }
                    }
                }
                parentModuleCache[nodeModule.id] = packageName;
            }
            return packageName;
        }
        return RequireAnalyzer.applicationPackageName;
    };
    return RequireAnalyzer;
}());
RequireAnalyzer.applicationPackageName = '!!!application!!!';
exports.RequireAnalyzer = RequireAnalyzer;

//# sourceMappingURL=../../maps/configuration/RequireAnalyzer.js.map
