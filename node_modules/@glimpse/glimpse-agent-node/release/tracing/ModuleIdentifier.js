"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
// tslint:disable:no-var-requires
var mod = require('module');
// tslint:enable:no-var-requires
var moduleInfoCache = {};
// tslint:disable:no-string-literal
var builtinModules = Object.keys(process['binding']('natives'));
// tslint:enable:no-string-literal
function checkIfBuiltIn(moduleName) {
    return builtinModules.indexOf(moduleName) !== -1;
}
function getPackageVersion(moduleName, modulePath) {
    // Need to recursively find package.json heading downwards
    // from path.dirname(resolvedPath);
    var dir = modulePath;
    while (dir !== path.dirname(dir)) {
        dir = path.dirname(dir);
        try {
            var packageInfo = require(path.join(dir, 'package.json'));
            // We need to check and make sure that the
            // package.json we found is for the module we want,
            // not a different module higher up the directory tree
            if (packageInfo.name === moduleName) {
                return packageInfo.version;
            }
        }
        catch (e) {
            // This means package.json doesn't exist, need to keep looking higher up the directory tree
        }
    }
    throw new Error("Internal Error: could not find the package.json file for " + moduleName + " at " + modulePath);
}
function resolveModulePath(request, startDir) {
    var dir = path.resolve(startDir);
    var paths = [path.join(dir, 'node_modules')];
    while (dir !== path.dirname(dir)) {
        dir = path.dirname(dir);
        paths.push(path.join(dir, 'node_modules'));
    }
    return mod._findPath(request, paths, false);
}
exports.resolveModulePath = resolveModulePath;
function getModuleInfo(moduleId, modulePath, originalModule) {
    if (moduleInfoCache[modulePath]) {
        return moduleInfoCache[modulePath];
    }
    var isBuiltIn = checkIfBuiltIn(moduleId);
    var version;
    if (isBuiltIn) {
        version = process.version.replace(/^v/, '');
    }
    else {
        version = getPackageVersion(moduleId, modulePath);
    }
    return moduleInfoCache[modulePath] = {
        moduleId: moduleId,
        modulePath: modulePath,
        version: version,
        isBuiltIn: isBuiltIn,
        originalModule: originalModule
    };
}
exports.getModuleInfo = getModuleInfo;

//# sourceMappingURL=../../maps/tracing/ModuleIdentifier.js.map
