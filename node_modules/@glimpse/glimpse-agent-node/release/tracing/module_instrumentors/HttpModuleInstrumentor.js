'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var HttpClientProxy_1 = require("./HttpClientProxy");
var HttpProxy_1 = require("../../inspectors/HttpProxy");
var WebInspector_1 = require("../../inspectors/WebInspector");
var EnvironmentInspector_1 = require("../../inspectors/EnvironmentInspector");
var HttpModuleInstrumentor = (function () {
    function HttpModuleInstrumentor() {
    }
    Object.defineProperty(HttpModuleInstrumentor.prototype, "supportedModules", {
        get: function () {
            return {
                'http': '4 - 7',
                'https': '4 - 7'
            };
        },
        enumerable: true,
        configurable: true
    });
    HttpModuleInstrumentor.prototype.setAgent = function (agent) {
        this.agent = agent;
    };
    HttpModuleInstrumentor.prototype.enableInstrumentation = function (moduleInfo) {
        // The client proxy is a little funny. The client module is implemented under
        // the hood such that the hooks we are interested are reused for both http and
        // https, so if we hooked both, we get doubled up messages
        if (moduleInfo.moduleId === 'http') {
            (new HttpClientProxy_1.HttpClientProxy()).init(moduleInfo);
        }
        var httpProxy = new HttpProxy_1.HttpProxy();
        // TODO: move back to the Agent once this is ported to the new proxy format
        httpProxy.addServerInspector(new WebInspector_1.WebInspector());
        httpProxy.addServerInspector(new EnvironmentInspector_1.EnvironmentInspector());
        var errorReportingService = this.agent ? this.agent.providers.errorReportingService : undefined;
        httpProxy.init(this.agent, moduleInfo.originalModule, moduleInfo.modulePath, errorReportingService);
        // Right now we don't do any in-depth checking to see if the module couldn't
        // be enabled for some reason, so we hard return true here
        return {
            isEnabled: true
        };
    };
    return HttpModuleInstrumentor;
}());
exports.HttpModuleInstrumentor = HttpModuleInstrumentor;

//# sourceMappingURL=../../../maps/tracing/module_instrumentors/HttpModuleInstrumentor.js.map
