'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var semver_1 = require("semver");
var Tracing_1 = require("../Tracing");
var MongoDBEvents_1 = require("./MongoDBEvents");
var MongoDBCoreProxy = (function () {
    function MongoDBCoreProxy() {
    }
    /**
     * event names for mongodb-core
     */
    MongoDBCoreProxy.prototype.init = function (moduleInfo) {
        var mongodbCoreModule = moduleInfo.originalModule;
        // mongodb-core 1.x funnels all commands to be issued to mongodb through
        // Server.prototype.command, however this was changed in 2.x so that it
        // is funneled through a connection pool at serverInstance.s.pool.write,
        // so we have to switched based on the mongodb-core to hook into the
        // right place. These events are used to properly track async calls
        if (semver_1.satisfies(moduleInfo.version, '>=2.0.0')) {
            /**
             * Override of mongodb-core Server.prototype.connect so that we can
             * override serverInstance.s.pool.write. The pool is created during
             * the call to `connect`
             */
            var functionServerConnect_1 = mongodbCoreModule.Server.prototype.connect;
            mongodbCoreModule.Server.prototype.connect = function connectProxy() {
                var retval = functionServerConnect_1.apply(this, arguments);
                var functionWritePool = this.s.pool.write;
                this.s.pool.write = function writeProxy() {
                    if (Tracing_1.default.isEventEnabled(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_POOL_WRITE)) {
                        var data = {
                            originalThis: this,
                            originalArgs: arguments
                        };
                        Tracing_1.default.publish(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_POOL_WRITE, data);
                    }
                    functionWritePool.apply(this, arguments);
                };
                return retval;
            };
        }
        else {
            /**
             * override of mongodb-core Server.prototype.command
             */
            var functionServerCommand_1 = mongodbCoreModule.Server.prototype.command;
            mongodbCoreModule.Server.prototype.command = function commandProxy() {
                if (Tracing_1.default.isEventEnabled(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_SERVER_COMMAND)) {
                    var data = {
                        originalThis: this,
                        originalArgs: arguments
                    };
                    Tracing_1.default.publish(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_SERVER_COMMAND, data);
                }
                functionServerCommand_1.apply(this, arguments);
            };
        }
        /**
         * override of mongodb-core Cursor.prototype.next
         */
        var functionCursorNext = mongodbCoreModule.Cursor.prototype.next;
        mongodbCoreModule.Cursor.prototype.next = function nextProxy() {
            if (Tracing_1.default.isEventEnabled(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_CURSOR_NEXT)) {
                var data = {
                    originalThis: this,
                    originalArgs: arguments
                };
                Tracing_1.default.publish(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_CURSOR_NEXT, data);
            }
            functionCursorNext.apply(this, arguments);
        };
    };
    return MongoDBCoreProxy;
}());
exports.MongoDBCoreProxy = MongoDBCoreProxy;

//# sourceMappingURL=../../../maps/tracing/module_instrumentors/MongoDBCoreProxy.js.map
