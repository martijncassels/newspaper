'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var DateTimeValue_1 = require("../configuration/DateTimeValue");
var glimpse_common_1 = require("@glimpse/glimpse-common");
var Tracing_1 = require("../tracing/Tracing");
var HttpHelper_1 = require("../util/HttpHelper");
var MultiPartFormSummarizer_1 = require("../util/MultiPartFormSummarizer");
var HttpEvents_1 = require("../tracing/module_instrumentors/HttpEvents");
var url = require("url");
var _ = require("lodash");
;
var ClientRequestInspector = (function () {
    function ClientRequestInspector() {
        this.requests = {};
        this.listeners = {};
    }
    ClientRequestInspector.prototype.normalizeOptions = function (options, req) {
        // Normalize to a copy of the original options
        if (typeof options === 'string') {
            options = url.parse(options);
        }
        options = _.assign({}, options);
        // Oddly, url.format ignores path and only uses pathname and search,
        // so create them from the path, if path was specified
        if (options.path) {
            var parsedQuery = url.parse(options.path);
            options.pathname = parsedQuery.pathname;
            options.search = parsedQuery.search;
        }
        // Simiarly, url.format ignores hostname and path if host is specified,
        // even if host doesn't have the port, but http.request does not work
        // this way. It will use the port if one is not specified in host,
        // effectively treating host as hostname, but will use the port specified
        // in host if it exists. Fun times.
        if (options.host && options.port) {
            // Force a protocol so it will parse the host as the host, not path.
            // It is discarded and not used, so it doesn't matter if it doesn't match
            var parsedHost = url.parse("http://" + options.host);
            if (!parsedHost.port && options.port) {
                options.hostname = options.host;
                delete options.host;
            }
        }
        // Mix in default values used by http.request and others
        options.protocol = options.protocol || req.agent.protocol;
        options.hostname = options.hostname || 'localhost';
        return options;
    };
    ClientRequestInspector.prototype.numOutstandingRequests = function () {
        return Object.keys(this.requests).length;
    };
    ClientRequestInspector.prototype.before = function (masterData) {
        var _this = this;
        if (masterData.context) {
            var frame = this.stackHelper.tryGetFirstUserCodeFrame(this.stackHelper.captureStack(this.before, 20));
            var frames_1 = [frame];
            // convert any numeric header values to strings to conform to json schema definition
            // Note: this uses a private field on the request object. Sadly, there isn't another way to get these currently.
            // tslint:disable-next-line:no-any
            var headers = _.assign({}, masterData.request._headers);
            for (var k in headers) {
                if (headers.hasOwnProperty(k)) {
                    if (typeof headers[k] === 'number') {
                        headers[k] = "" + headers[k];
                    }
                }
            }
            var payload_1 = {
                protocol: {
                    identifier: masterData.options.protocol.replace(':', '').toLowerCase(),
                    // This value is hard coded in Node: https://github.com/nodejs/node/blob/d0582ef9e19e8ed941b0a585c935ad11919080ee/lib/_http_client.js#L114
                    version: '1.1'
                },
                url: url.format(masterData.options),
                // The method property isn't documented in the typings definition, for some reason
                //tslint:disable-next-line:no-any
                method: masterData.request.method,
                startTime: masterData.requestStartTime.format(),
                headers: headers,
                frames: frames_1,
                isAjax: false,
                clientIp: '127.0.0.1',
                body: HttpHelper_1.HttpHelper.createMessageBodyProperty(masterData.request, masterData.requestBodyChunks, masterData.requestBodyLength, this.agent.providers.configSettings, masterData.multiPartFormSummarizer ? masterData.multiPartFormSummarizer.getParts() : []),
                timing: {
                    startTime: 0
                },
                correlationId: masterData.correlationId
            };
            // TODO:  when we detect "first byte on wire" for send, we'll want to create the message envelope so it has the correct offset,
            // and then send it here
            var message_1 = this.messageConverter.createMessageEnvelope(['data-http-request', 'call-stack'], undefined, masterData.context);
            message_1.payload = payload_1;
            this.stackHelper.mapFrames(payload_1.frames, function (mappedFrames) {
                payload_1.frames = mappedFrames;
                var transformedMessage = _this.messageConverter.transformMessageForTransit(message_1, message_1.payload);
                _this.agent.broker.sendMessage(transformedMessage);
            });
        }
    };
    ClientRequestInspector.prototype.after = function (masterData) {
        if (masterData.context && masterData.responseMessage) {
            var payload = {
                // res.url doesn't seem to be populated in practice
                url: masterData.response.url || url.format(masterData.options),
                headers: masterData.response.headers,
                statusCode: masterData.response.statusCode,
                statusMessage: masterData.response.statusMessage,
                endTime: masterData.responseEndTime.format(),
                duration: masterData.duration,
                body: HttpHelper_1.HttpHelper.createMessageBodyProperty(masterData.response, masterData.responseBodyChunks, masterData.responseBodyLength, this.agent.providers.configSettings),
                timing: {
                    startTime: 0,
                    responseStart: masterData.responseStartTime.diff(masterData.requestStartTime),
                    responseEnd: masterData.responseEndTime.diff(masterData.requestStartTime)
                },
                correlationId: masterData.correlationId
            };
            var transmittableMessage = this.agent.providers.messageConverter.transformMessageForTransit(masterData.responseMessage, payload);
            this.agent.broker.sendMessage(transmittableMessage);
        }
    };
    ClientRequestInspector.prototype.init = function (agent, errorReportingService) {
        var _this = this;
        this.agent = agent;
        this.errorReportingService = errorReportingService;
        this.stackHelper = agent.providers.stackHelper;
        this.messageConverter = agent.providers.messageConverter;
        this.listeners = (_a = {},
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_REQUEST_CREATED] = function (event) { return _this.onRequestCreated(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_REQUEST_DATA_SENT] = function (event) { return _this.onRequestDataSent(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_REQUEST_END] = function (event) { return _this.onRequestEnd(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_REQUEST_ERROR] = function (event) { return _this.onRequestError(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_RESPONSE_RECEIVED] = function (event) { return _this.onResponseReceived(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_RESPONSE_DATA_RECEIVED] = function (event) { return _this.onResponseDataReceived(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_RESPONSE_END] = function (event) { return _this.onResponseEnd(event); },
            _a[HttpEvents_1.EVENT_HTTP_CLIENT_RESPONSE_ERROR] = function (event) { return _this.onResponseError(event); },
            _a);
        for (var event_1 in this.listeners) {
            if (!this.listeners.hasOwnProperty(event_1)) {
                continue;
            }
            Tracing_1.default.onAlways(event_1, this.listeners[event_1]);
        }
        var _a;
    };
    ClientRequestInspector.prototype.removeEventListeners = function () {
        for (var event_2 in this.listeners) {
            if (!this.listeners.hasOwnProperty(event_2)) {
                continue;
            }
            Tracing_1.default.removeEventListener(event_2, this.listeners[event_2]);
        }
    };
    ClientRequestInspector.prototype.onRequestCreated = function (event) {
        var eventData = event.data;
        var context = this.agent.providers.contextManager.currentContext();
        if (context) {
            HttpHelper_1.HttpHelper.setContext(eventData.req, context);
        }
        this.requests[eventData.id] = {
            requestCreatedTime: DateTimeValue_1.DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time),
            requestStartTime: undefined,
            responseStartTime: undefined,
            responseEndTime: undefined,
            duration: 0,
            options: this.normalizeOptions(eventData.options, eventData.req),
            request: eventData.req,
            response: undefined,
            requestBodyChunks: [],
            requestBodyLength: 0,
            responseBodyChunks: [],
            responseBodyLength: 0,
            correlationId: eventData.id,
            isMultiPartFormData: undefined,
            multiPartFormSummarizer: undefined,
            responseMessage: undefined,
            context: context
        };
    };
    ClientRequestInspector.prototype.onRequestDataSent = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        if (masterData.context) {
            // Save part or all of the chunk to the set of chunks,
            // truncating if necessary to keep the set under the
            // max body size
            var originalChunkLength = eventData.chunk.length;
            var normalizedChunk = eventData.chunk;
            var maxBodySize = HttpHelper_1.HttpHelper.getMaxBodySize(this.agent.providers.configSettings);
            if (masterData.requestBodyLength < maxBodySize) {
                if (masterData.requestBodyLength + originalChunkLength >= maxBodySize) {
                    normalizedChunk = normalizedChunk.slice(0, maxBodySize - masterData.requestBodyLength);
                }
                masterData.requestBodyChunks.push(normalizedChunk);
            }
            masterData.requestBodyLength += originalChunkLength;
            // create the multipart/form-data summarizer if this is a multipart/form-data request
            if (masterData.isMultiPartFormData === undefined) {
                masterData.multiPartFormSummarizer = MultiPartFormSummarizer_1.createMultiPartFormSummarizer(masterData.request.getHeader('content-type'));
                if (masterData.multiPartFormSummarizer) {
                    masterData.isMultiPartFormData = true;
                }
                else {
                    masterData.isMultiPartFormData = false;
                }
            }
            // if we have a summarizer, send this chunk to it
            if (masterData.multiPartFormSummarizer) {
                masterData.multiPartFormSummarizer.addChunk(eventData.chunk);
            }
        }
    };
    ClientRequestInspector.prototype.onRequestEnd = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        // TODO:  Ideally, we'd have some hooks that detect "first byte on the wire", and we'd set requestStartTime to that.
        //        in lieu of that, we assume that "request end" marks the "first byte on the wire"
        masterData.requestStartTime = DateTimeValue_1.DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time);
        this.before(masterData);
    };
    ClientRequestInspector.prototype.onRequestError = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        delete this.requests[eventData.id];
        this.errorReportingService.reportError(glimpse_common_1.createHttpClientError(eventData.error));
    };
    ClientRequestInspector.prototype.onResponseReceived = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        if (masterData.context) {
            masterData.response = eventData.res;
            HttpHelper_1.HttpHelper.setContext(masterData.response, masterData.context);
            // create the message envelope now so the offset value & the ordinal & offset will reflect the start of response
            masterData.responseMessage = this.agent.providers.messageConverter.createMessageEnvelope(['data-http-response'], undefined, masterData.context);
            masterData.responseStartTime = DateTimeValue_1.DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time);
        }
    };
    ClientRequestInspector.prototype.onResponseDataReceived = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        if (masterData.context) {
            // Save part or all of the chunk to the set of chunks,
            // truncating if necessary to keep the set under the
            // max body size
            var originalChunkLength = eventData.chunk.length;
            var normalizedChunk = eventData.chunk;
            var maxBodySize = HttpHelper_1.HttpHelper.getMaxBodySize(this.agent.providers.configSettings);
            if (masterData.responseBodyLength < maxBodySize) {
                if (masterData.responseBodyLength + originalChunkLength >= maxBodySize) {
                    normalizedChunk = normalizedChunk.slice(0, maxBodySize - masterData.responseBodyLength);
                }
                masterData.responseBodyChunks.push(normalizedChunk);
            }
            masterData.responseBodyLength += originalChunkLength;
        }
    };
    ClientRequestInspector.prototype.onResponseEnd = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        if (masterData.context) {
            masterData.responseEndTime = DateTimeValue_1.DateTimeValue.fromUnixMillisecondTimestamp(event.timestamp, event.time);
            masterData.duration = masterData.responseEndTime.diff(masterData.requestStartTime);
            this.after(masterData);
        }
        delete this.requests[eventData.id];
    };
    ClientRequestInspector.prototype.onResponseError = function (event) {
        var eventData = event.data;
        var masterData = this.requests[eventData.id];
        if (!masterData) {
            throw new Error('Internal error: could not find associated master data');
        }
        delete this.requests[eventData.id];
        this.errorReportingService.reportError(glimpse_common_1.createHttpClientError(eventData.error));
    };
    return ClientRequestInspector;
}());
exports.ClientRequestInspector = ClientRequestInspector;

//# sourceMappingURL=../../maps/inspectors/ClientRequestInspector.js.map
