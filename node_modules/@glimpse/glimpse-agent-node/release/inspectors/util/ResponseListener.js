'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var events = require("events");
var ResponseListener = (function (_super) {
    __extends(ResponseListener, _super);
    function ResponseListener(res) {
        var _this = _super.call(this) || this;
        _this.patchResponseAddTrailers(res);
        _this.patchResponseSetHeader(res);
        _this.patchResponseSetStatusCode(res);
        _this.patchResponseSetStatusMessage(res);
        _this.patchResponseWrite(res);
        return _this;
    }
    ResponseListener.attachListener = function (res) {
        var responseListener = res[ResponseListener.glimpseResponseListenerProperty];
        if (!responseListener) {
            responseListener = new ResponseListener(res);
            res[ResponseListener.glimpseResponseListenerProperty] = responseListener;
        }
        return responseListener;
    };
    ResponseListener.getAllHeaders = function (res) {
        // NOTE: The _header and _trailer properties are implementation details of the Node runtime.
        //       These properties are populated as the response is being written to the wire.
        //       As Node writes certain headers (e.g. Date, Connection) only as the response is written,
        //       we use the properties to ensure we capture *all* headers, not just those written by
        //       the application.
        var headers = {};
        ResponseListener.addFormattedHeaders(headers, res._header);
        ResponseListener.addFormattedHeaders(headers, res._trailer);
        return headers;
    };
    Object.defineProperty(ResponseListener.prototype, "sentStatusCode", {
        /**
         * Returns the status code actually sent to the client (as this may be different than `statusCode`).
         *
         * Notes:
         *
         *  - If headers have not yet been sent, then the value returned is what *would* be sent.
         *
         *  - If headers were sent before the attachment of this listener, then the value returned
         *    will be the value of `statusCode` at the time of attachment (and in that case may not
         *    be the *actual* value sent to the client).
         */
        get: function () {
            return this._sentStatusCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseListener.prototype, "sentStatusMessage", {
        /**
         * Returns the status message actually sent to the client (as this may be different than `statusMessage`).
         *
         * Notes:
         *
         *  - If headers have not yet been sent, then the value returned is what *would* be sent.
         *
         *  - If headers were sent before the attachment of this listener, then the value returned
         *    will be the value of `statusMessage` at the time of attachment (and in that case may not
         *    be the *actual* value sent to the client).
         */
        get: function () {
            return this._sentStatusMessage;
        },
        enumerable: true,
        configurable: true
    });
    ResponseListener.addFormattedHeaders = function (headers, formattedHeaders) {
        if (formattedHeaders) {
            var splitHeaders = formattedHeaders.split('\r\n');
            splitHeaders.forEach(function (splitHeader) {
                var index = splitHeader.indexOf(': ');
                if (index >= 0) {
                    var name_1 = splitHeader.substring(0, index);
                    var value = splitHeader.substring(index + 2);
                    if (name_1) {
                        var loweredName = name_1.toLowerCase();
                        if (headers[loweredName]) {
                            headers[loweredName].push(value);
                        }
                        else {
                            headers[loweredName] = [value];
                        }
                    }
                }
            });
        }
    };
    ResponseListener.prototype.patchResponseSetHeader = function (res) {
        var oldSetHeader = res.setHeader;
        var self = this;
        res.setHeader = function newSetHeader(name, value) {
            oldSetHeader.apply(this, arguments);
            var newHeaders = {};
            if (Array.isArray(value)) {
                newHeaders[name.toLowerCase()] = value;
            }
            else {
                newHeaders[name.toLowerCase()] = [value.toString()];
            }
            self.publishHeaderChanges(newHeaders);
        };
    };
    ResponseListener.prototype.patchResponseAddTrailers = function (res) {
        var oldAddTrailers = res.addTrailers;
        var self = this;
        res.addTrailers = function newAddTrailers(headers) {
            oldAddTrailers.apply(this, arguments);
            var newHeaders = {};
            _.forOwn(headers, function (value, key) {
                newHeaders[key.toLowerCase()] = [value];
            });
            self.publishHeaderChanges(newHeaders);
        };
    };
    ResponseListener.prototype.publishHeaderChanges = function (headers) {
        this.emit(ResponseListener.headersEvent, headers);
    };
    ResponseListener.prototype.patchResponseSetStatusCode = function (res) {
        var currentStatusCode = this._sentStatusCode = res.statusCode;
        var self = this;
        Object.defineProperty(res, 'statusCode', {
            get: function () {
                return currentStatusCode;
            },
            set: function (value) {
                currentStatusCode = value;
                if (!res.headersSent) {
                    self._sentStatusCode = currentStatusCode;
                }
                self.emit(ResponseListener.statusCodeEvent, currentStatusCode);
            }
        });
    };
    ResponseListener.prototype.patchResponseSetStatusMessage = function (res) {
        var currentStatusMessage = this._sentStatusMessage = res.statusMessage;
        var self = this;
        Object.defineProperty(res, 'statusMessage', {
            get: function () {
                return currentStatusMessage;
            },
            set: function (value) {
                currentStatusMessage = value;
                if (!res.headersSent) {
                    self._sentStatusMessage = currentStatusMessage;
                }
                self.emit(ResponseListener.statusMessageEvent, currentStatusMessage);
            }
        });
    };
    ResponseListener.prototype.patchResponseWrite = function (res) {
        var oldWrite = res.write;
        var self = this;
        res.write = function newWrite(data) {
            var result = oldWrite.apply(this, arguments);
            // Ignore writes of empty data...
            //
            // NOTE: Express <=4.6 APIs will itself ignore empty-string writes.
            //       Express >=4.7 APIs convert empty-string-writes to Buffers and pass them to write().
            if (data && data.length) {
                self.emit(ResponseListener.bodyEvent);
            }
            return result;
        };
    };
    return ResponseListener;
}(events.EventEmitter));
ResponseListener.glimpseResponseListenerProperty = '__glimpseResponseListener';
ResponseListener.bodyEvent = 'body';
ResponseListener.headersEvent = 'headers';
ResponseListener.statusCodeEvent = 'statusCode';
ResponseListener.statusMessageEvent = 'statusMessage';
exports.ResponseListener = ResponseListener;

//# sourceMappingURL=../../../maps/inspectors/util/ResponseListener.js.map
