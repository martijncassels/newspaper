'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var ResponseListener_1 = require("./ResponseListener");
var GuidHelper_1 = require("../../util/GuidHelper");
var HttpHelper_1 = require("../../util/HttpHelper");
var _ = require("lodash");
var MiddlewareWrapper = (function () {
    function MiddlewareWrapper(stackHelper, messageConverter, broker, contextManager, dateTime) {
        this.stackHelper = stackHelper;
        this.messageConverter = messageConverter;
        this.broker = broker;
        this.contextManager = contextManager;
        this.dateTime = dateTime;
    }
    MiddlewareWrapper.prototype.mapFramesAndSendMessageAsync = function (message) {
        var _this = this;
        if (message.payload.frames) {
            this.stackHelper.mapFrames(message.payload.frames, function (mappedFrames) {
                message.payload.frames = mappedFrames;
                var transformedMessage = _this.messageConverter.transformMessageForTransit(message, message.payload);
                _this.broker.sendMessage(transformedMessage);
            });
        }
        else {
            var transformedMessage = this.messageConverter.transformMessageForTransit(message, message.payload);
            this.broker.sendMessage(transformedMessage);
        }
    };
    MiddlewareWrapper.prototype.wrapCommonMiddleware = function (paths, method, originalMiddlewareName, middlewareMetadata, req, res, next, originalMiddleware, registrationCallstack) {
        var self = this;
        var context = HttpHelper_1.HttpHelper.getContext(res);
        if (!context) {
            return originalMiddleware(req, res, next);
        }
        self.contextManager.checkContextID('MiddlewareWrapper::MiddlewareWrapper', context ? context.id : undefined);
        var correlationId = GuidHelper_1.GuidHelper.newGuid();
        var startTime = self.dateTime.now;
        var name = originalMiddlewareName || '<anonymous>';
        var displayName = undefined;
        var packageName = undefined;
        if (middlewareMetadata) {
            name = middlewareMetadata.name || name;
            displayName = middlewareMetadata.displayName;
            packageName = middlewareMetadata.packageName;
        }
        var startPayload = {
            correlationId: correlationId,
            name: name,
            startTime: startTime.format(),
            frames: registrationCallstack
        };
        if (displayName) {
            startPayload.displayName = displayName;
        }
        if (packageName) {
            startPayload.packageName = packageName;
        }
        if (paths && paths.length > 0) {
            startPayload.paths = paths;
        }
        if (method) {
            startPayload.method = method;
        }
        if (req.params && !_.isEmpty(req.params)) {
            startPayload.params = req.params;
        }
        var messageTypes = ['middleware-express', 'middleware-start', 'call-stack'];
        var message = self.messageConverter.createMessageEnvelope(messageTypes, /*indices*/ undefined, context);
        message.payload = startPayload;
        // send message asynchronously
        self.mapFramesAndSendMessageAsync(message);
        var headers = {};
        var operations = [];
        var publishedEnd = false;
        function publishMiddlewareEnd(result) {
            // NOTE: To prevent the client from getting confused, we only ever publish a single "end" message.
            if (!publishedEnd) {
                var endTime = self.dateTime.now;
                var duration = endTime.diff(startTime);
                var endPayload = {
                    correlationId: correlationId,
                    name: name,
                    endTime: endTime.format(),
                    duration: duration,
                    result: result
                };
                if (displayName) {
                    endPayload.displayName = displayName;
                }
                if (packageName) {
                    endPayload.packageName = packageName;
                }
                if (!_.isEmpty(headers)) {
                    endPayload.headers = _.map(headers, function (value, key) {
                        return {
                            op: 'set',
                            name: key,
                            values: value
                        };
                    });
                }
                if (operations.length) {
                    endPayload.operations = operations;
                }
                if (paths && paths.length > 0) {
                    endPayload.paths = paths;
                }
                if (method) {
                    endPayload.method = method;
                }
                if (req.params && !_.isEmpty(req.params)) {
                    endPayload.params = req.params;
                }
                self.broker.createAndSendMessage(endPayload, ['middleware-express', 'middleware-end'], 
                /* indices */ undefined, context);
                publishedEnd = true;
            }
        }
        ;
        function onPublishMiddlewareEnd() {
            publishMiddlewareEnd(/* result */ 'end');
        }
        ;
        if (!context.middleware) {
            context.middleware = {
                stack: []
            };
        }
        context.middleware.stack.push(onPublishMiddlewareEnd);
        function onResponseFinish() {
            while (context.middleware.stack.length > 0) {
                var endFunction = context.middleware.stack.pop();
                endFunction();
            }
        }
        ;
        res.on('finish', onResponseFinish);
        function onBody() {
            var responseBody = {
                type: 'responseBody'
            };
            operations.push(responseBody);
        }
        function onHeaders(newHeaders) {
            _.assign(headers, newHeaders);
        }
        function onStatusCodeSet(statusCode) {
            var responseStatusCode = {
                type: 'responseStatusCode',
                statusCode: statusCode
            };
            operations.push(responseStatusCode);
        }
        var responseListener = ResponseListener_1.ResponseListener.attachListener(res);
        responseListener.on(ResponseListener_1.ResponseListener.bodyEvent, onBody);
        responseListener.on(ResponseListener_1.ResponseListener.headersEvent, onHeaders);
        responseListener.on(ResponseListener_1.ResponseListener.statusCodeEvent, onStatusCodeSet);
        var cleanedUp = false;
        var cleanUpAndPublishEnd = function (result) {
            // NOTE: Certain error conditions can cause next() and/or exception handlers to be called again.
            if (!cleanedUp) {
                cleanedUp = true;
                res.removeListener('finish', onResponseFinish);
                responseListener.removeListener(ResponseListener_1.ResponseListener.bodyEvent, onBody);
                responseListener.removeListener(ResponseListener_1.ResponseListener.headersEvent, onHeaders);
                responseListener.removeListener(ResponseListener_1.ResponseListener.statusCodeEvent, onStatusCodeSet);
                context.middleware.stack.pop();
                publishMiddlewareEnd(result);
            }
        };
        var newNext = self.contextManager.wrapInCurrentContext(function newNextInternal() {
            self.contextManager.checkContextID('MiddlewareWrapper::newNext', context.id);
            var result = 'next';
            if (arguments && arguments.length > 0 && arguments[0] !== 'route') {
                result = 'error';
            }
            cleanUpAndPublishEnd(result);
            return next.apply(this, arguments);
        });
        try {
            originalMiddleware(req, res, newNext);
        }
        catch (err) {
            cleanUpAndPublishEnd(/* result */ 'error');
            throw err;
        }
    };
    MiddlewareWrapper.prototype.wrapErrorMiddleware = function (paths, method, originalMiddleware, registrationCallstack) {
        var self = this;
        var wrappedMiddleware = function wrappedMiddleware(err, req, res, next) {
            self.wrapCommonMiddleware(paths, method, originalMiddleware.name, originalMiddleware.glimpse, req, res, next, function (q, r, n) {
                originalMiddleware(err, q, r, n);
            }, registrationCallstack);
        };
        wrappedMiddleware.glimpse = {
            originalName: originalMiddleware.name
        };
        return wrappedMiddleware;
    };
    MiddlewareWrapper.prototype.wrapMiddleware = function (paths, method, originalMiddleware, registrationCallstack) {
        var self = this;
        var wrappedMiddleware = function wrappedMiddleware(req, res, next) {
            self.wrapCommonMiddleware(paths, method, originalMiddleware.name, originalMiddleware.glimpse, req, res, next, function (q, r, n) {
                originalMiddleware(q, r, n);
            }, registrationCallstack);
        };
        wrappedMiddleware.glimpse = {
            originalName: originalMiddleware.name
        };
        return wrappedMiddleware;
    };
    MiddlewareWrapper.prototype.wrap = function (paths, method, originalMiddleware, registrationCallstack) {
        if (originalMiddleware && typeof originalMiddleware === 'function') {
            if (originalMiddleware.length === 2 || originalMiddleware.length === 3) {
                return this.wrapMiddleware(paths, method, originalMiddleware, registrationCallstack);
            }
            if (originalMiddleware.length === 4) {
                return this.wrapErrorMiddleware(paths, method, originalMiddleware, registrationCallstack);
            }
        }
        return originalMiddleware;
    };
    MiddlewareWrapper.attachMetadata = function (middleware, name, displayName, packageName) {
        if (middleware) {
            var metadata = middleware.glimpse || {};
            if (!middleware.glimpse) {
                middleware.glimpse = metadata;
            }
            if (!metadata.name) {
                metadata.name = name;
            }
            if (!metadata.displayName) {
                metadata.displayName = displayName;
            }
            if (!metadata.packageName) {
                metadata.packageName = packageName;
            }
        }
    };
    return MiddlewareWrapper;
}());
exports.MiddlewareWrapper = MiddlewareWrapper;

//# sourceMappingURL=../../../maps/inspectors/util/MiddlewareWrapper.js.map
