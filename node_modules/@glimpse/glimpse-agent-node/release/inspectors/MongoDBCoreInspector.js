'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var Tracing_1 = require("../tracing/Tracing");
var MongoDBEvents_1 = require("../tracing/module_instrumentors/MongoDBEvents");
var MongoDBCoreInspector = (function () {
    function MongoDBCoreInspector() {
    }
    MongoDBCoreInspector.prototype.init = function (agent) {
        this.contextManager = agent.providers.contextManager;
        var self = this;
        function wrapCallback(event, callbackIndex) {
            var originalArgs = event.data.originalArgs;
            var callback = originalArgs[callbackIndex];
            if (self.contextManager.isWithinContext()) {
                if (typeof originalArgs[callbackIndex - 1] === 'function') {
                    callbackIndex--;
                    callback = originalArgs[callbackIndex];
                }
                // we need to propogate context for any callbacks so the glimpse context ID doesn't get lost
                callback = self.contextManager.wrapInCurrentContext(callback);
                event.data.originalArgs[callbackIndex] = callback;
            }
        }
        Tracing_1.default.onAlways(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_SERVER_COMMAND, function (event) {
            // original signiture: command(ns, cmd, options, callback)
            wrapCallback(event, 3);
        });
        Tracing_1.default.onAlways(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_POOL_WRITE, function (event) {
            // original signiture: command(buffer, options, cb), see
            // https://github.com/christkv/mongodb-core/blob/5b996789fa052a22ddbd680565befa2a11281fd9/lib/connection/pool.js#L836
            wrapCallback(event, 2);
        });
        Tracing_1.default.onAlways(MongoDBEvents_1.EVENT_MONGODB_CORE_INVOKE_PRE_MONGODB_CORE_CURSOR_NEXT, function (event) {
            var originalArgs = event.data.originalArgs;
            var callback = originalArgs[0];
            if (self.contextManager.isWithinContext() && typeof callback === 'function') {
                // we need to propogate context for any callbacks so the glimpse context ID doesn't get lost
                callback = self.contextManager.wrapInCurrentContext(callback);
                event.data.originalArgs[0] = callback;
            }
        });
    };
    return MongoDBCoreInspector;
}());
exports.MongoDBCoreInspector = MongoDBCoreInspector;

//# sourceMappingURL=../../maps/inspectors/MongoDBCoreInspector.js.map
