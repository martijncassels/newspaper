'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ProxyBase_1 = require("./ProxyBase");
var MiddlewareWrapper_1 = require("./util/MiddlewareWrapper");
var BodyParserProxy = (function (_super) {
    __extends(BodyParserProxy, _super);
    function BodyParserProxy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BodyParserProxy.prototype, "moduleName", {
        get: function () { return 'body-parser'; },
        enumerable: true,
        configurable: true
    });
    ;
    BodyParserProxy.prototype.init = function (agent, module) {
        // NOTE: Calling the module function will result in a 'deprecated' warning.
        //       We need to keep the function in the new module for compatibility purposes so the warning, while annoying, must be ignored.
        /* tslint:disable no-any */
        var newModule = BodyParserProxy.wrapParserFactory(module, 'bodyParser', 'Body Parser');
        /* tslint:enable no-any */
        // NOTE: The original module explicitly defines these exports as read-only properties so we must create a new module (function).
        newModule.json = BodyParserProxy.wrapParserFactory(module.json, 'json', 'JSON Body Parser');
        newModule.raw = BodyParserProxy.wrapParserFactory(module.raw, 'raw', 'Raw Body Parser');
        newModule.text = BodyParserProxy.wrapParserFactory(module.text, 'text', 'Text Body Parser');
        newModule.urlencoded = BodyParserProxy.wrapParserFactory(module.urlencoded, 'urlencoded', 'URL-Encoded Body Parser');
        return newModule;
    };
    BodyParserProxy.wrapParserFactory = function (parserFactory, name, displayName) {
        return function newParserFactory() {
            var parser = parserFactory.apply(this, arguments);
            MiddlewareWrapper_1.MiddlewareWrapper.attachMetadata(parser, name, displayName, 'body-parser');
            return parser;
        };
    };
    return BodyParserProxy;
}(ProxyBase_1.ProxyBase));
exports.BodyParserProxy = BodyParserProxy;

//# sourceMappingURL=../../maps/inspectors/BodyParserProxy.js.map
