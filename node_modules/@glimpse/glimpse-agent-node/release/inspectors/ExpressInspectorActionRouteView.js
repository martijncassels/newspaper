'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var GuidHelper_1 = require("./../util/GuidHelper");
var ExpressEvents_1 = require("./../tracing/module_instrumentors/ExpressEvents");
var HttpHelper_1 = require("../util/HttpHelper");
var Tracing_1 = require("./../tracing/Tracing");
var path = require("path");
var ExpressInspectorActionRouteView = (function () {
    function ExpressInspectorActionRouteView() {
    }
    ExpressInspectorActionRouteView.prototype.init = function (broker, contextManager, dateTime, errorReportingService, scriptManager) {
        var _this = this;
        this.broker = broker;
        this.contextManager = contextManager;
        this.dateTime = dateTime;
        this.errorReportingService = errorReportingService;
        this.scriptManager = scriptManager;
        Tracing_1.default.onAlways(ExpressEvents_1.EVENT_EXPRESS_INVOKE_PRE_ROUTE_DISPATCH, function (event) {
            if (!HttpHelper_1.HttpHelper.isInProcessServerResponse(event.data.response)) {
                _this.onRouteDispatch(event.data.originalThis, event.data.response);
            }
        });
        Tracing_1.default.onAlways(ExpressEvents_1.EVENT_EXPRESS_INVOKE_PRE_RESPONSE_RENDER, function (event) {
            // TODO: https://github.com/Glimpse/Glimpse.Node/issues/320 - test missing
            if (!HttpHelper_1.HttpHelper.isInProcessServerResponse(event.data.response)) {
                _this.onResponseRender(event.data.originalThis);
            }
        });
        Tracing_1.default.onAlways(ExpressEvents_1.EVENT_EXPRESS_INVOKE_PRE_RESPONSE_SEND, function (event) {
            // TODO: https://github.com/Glimpse/Glimpse.Node/issues/320 - test missing
            if (!HttpHelper_1.HttpHelper.isInProcessServerResponse(event.data.response)) {
                _this.onResponseSend(event.data.originalThis, event.data.originalArgs);
            }
        });
        Tracing_1.default.onAlways(ExpressEvents_1.EVENT_EXPRESS_INVOKE_PRE_RESPONSE_END, function (event) {
            // TODO: https://github.com/Glimpse/Glimpse.Node/issues/320 - test missing
            if (!HttpHelper_1.HttpHelper.isInProcessServerResponse(event.data.response)) {
                _this.onResponseEnd(event.data.originalThis);
            }
        });
        Tracing_1.default.onAlways(ExpressEvents_1.EVENT_EXPRESS_NOTIFY_RENDER_COMPLETE, function (event) {
            if (!HttpHelper_1.HttpHelper.isInProcessServerResponse(event.data.response)) {
                if (event.data.err) {
                    _this.onRenderCompleteError(event.data.err, event.data.response);
                }
                else {
                    // TODO: https://github.com/Glimpse/Glimpse.Node/issues/320 - test missing
                    _this.onRenderComplete(event.data.response);
                }
            }
        });
        Tracing_1.default.onAlways(ExpressEvents_1.EVENT_EXPRESS_INVOKE_PRE_VIEW_RENDER, function (event) {
            _this.onViewRender(event.data.originalThis);
        });
    };
    ExpressInspectorActionRouteView.prototype.onRouteDispatch = function (route, response) {
        var context = HttpHelper_1.HttpHelper.getContext(response);
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onRouteDispatch()', context ? context.id : undefined);
        // TODO: figure out what correct data to display here for a "route" and an "action"
        var middlewareFunction = route.stack[0].handle;
        var functionName;
        if (middlewareFunction.glimpse) {
            functionName = middlewareFunction.glimpse.originalName || '<anonymous>';
        }
        else {
            functionName = middlewareFunction.name || '<anonymous>';
        }
        var actionId = GuidHelper_1.GuidHelper.newGuid();
        var actionName = functionName;
        var actionDisplayName = functionName;
        //const actionControllerName = functionName;
        var actionStartTime = new Date();
        this.broker.createAndSendMessage({
            actionId: actionId,
            actionName: actionName,
            actionDisplayName: actionDisplayName,
            actionControllerName: '',
            // 'begin-action', 'action-route'
            actionStartTime: actionStartTime,
            routeName: functionName,
            routePattern: route.path,
            routeData: {
                controller: '',
                action: actionName
            },
            // 'before-action-invoked', 'action-content'
            actionTargetClass: '',
            actionTargetMethod: '',
            actionInvokedStartTime: actionStartTime,
            /* tslint:disable no-null-keyword */
            binding: null
            /* tslint:enable no-null-keyword */
        }, ['begin-action', 'action-route', 'before-action-invoked', 'action-content'], undefined /*indices*/, context);
        // Save some action-related context for response rendering...
        var extendedContext = context;
        extendedContext.action = {
            actionId: actionId,
            actionName: actionName,
            actionControllerName: '',
            actionStartTime: actionStartTime,
            beforeActionInvokedSent: true,
            afterActionInvokedSent: false
        };
    };
    ExpressInspectorActionRouteView.prototype.onResponseEnd = function (response) {
        var context = HttpHelper_1.HttpHelper.getContext(response);
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onResponseEnd()', context ? context.id : undefined);
        if (!context) {
            return;
        }
        var actionContext = context.action;
        // ensure that we send after-action-invoked if it hasn't already been sent.
        // TODO:  There's probably a better way to do this.
        if (actionContext && actionContext.beforeActionInvokedSent && !actionContext.afterActionInvokedSent) {
            var startTime = new Date();
            this.broker.createAndSendMessage({
                actionId: actionContext.actionId,
                actionName: actionContext.actionName,
                actionControllerName: '',
                // 'after-action-invoked'
                actionInvokedEndTime: startTime,
                actionInvokedDuration: startTime.getTime() - actionContext.actionStartTime.getTime(),
                actionInvokedOffset: actionContext.actionStartTime.getTime() - context.startTime.getUnixTimestamp()
            }, ['after-action-invoked'], undefined, context);
            actionContext.afterActionInvokedSent = true;
        }
    };
    ExpressInspectorActionRouteView.prototype.onRenderCompleteError = function (err, response) {
        var context = HttpHelper_1.HttpHelper.getContext(response);
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onRenderCompleteError()', context ? context.id : undefined);
        if (!context) {
            return;
        }
        var actionContext = context.action;
        if (!actionContext) {
            return;
        }
        if (err.view) {
            var viewPath = err.view.path;
            if (!viewPath) {
                viewPath = path.join(err.view.root, err.view.name) + err.view.ext;
            }
            var viewFound = err.view.path ? true : false;
            this.sendActionViewFound(err.view.name, viewPath, viewFound, context);
        }
    };
    ExpressInspectorActionRouteView.prototype.onRenderComplete = function (response) {
        var context = HttpHelper_1.HttpHelper.getContext(response);
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onRenderComplete()', context ? context.id : undefined);
        if (!context) {
            return;
        }
        var actionContext = context.action;
        if (!actionContext) {
            return;
        }
        var startTime = actionContext.responseRenderStartTime;
        var endTime = new Date();
        this.broker.createAndSendMessage({
            actionId: actionContext.actionId,
            actionName: actionContext.actionName,
            actionControllerName: '',
            // 'after-action-view-invoked'
            viewEndTime: endTime,
            viewDuration: endTime.getTime() - startTime.getTime(),
            viewOffset: startTime.getTime() - context.startTime.getUnixTimestamp(),
            // 'after-action'
            actionEndTime: endTime,
            actionDuration: endTime.getTime() - actionContext.actionStartTime.getTime(),
            actionOffset: actionContext.actionStartTime.getTime() - context.startTime.getUnixTimestamp()
        }, ['after-action-view-invoked', 'after-action'], undefined, context);
    };
    ExpressInspectorActionRouteView.prototype.onResponseRender = function (response) {
        var context = HttpHelper_1.HttpHelper.getContext(response);
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onResponseRender()', context ? context.id : undefined);
        if (!context) {
            return;
        }
        var actionContext = context.action;
        if (!actionContext) {
            return;
        }
        var startTime = new Date();
        actionContext.responseRenderStartTime = startTime;
        this.broker.createAndSendMessage({
            actionId: actionContext.actionId,
            actionName: actionContext.actionName,
            actionControllerName: '',
            // 'after-action-invoked'
            actionInvokedEndTime: startTime,
            actionInvokedDuration: startTime.getTime() - actionContext.actionStartTime.getTime(),
            actionInvokedOffset: actionContext.actionStartTime.getTime() - context.startTime.getUnixTimestamp(),
            // 'before-action-view-invoked'
            viewStartTime: startTime
        }, ['after-action-invoked', 'before-action-view-invoked'], undefined, context);
        actionContext.afterActionInvokedSent = true;
    };
    ExpressInspectorActionRouteView.prototype.onViewRender = function (view) {
        var context = this.contextManager.currentContext();
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onViewRender()', context ? context.id : undefined);
        var viewPath = view.path || path.join(view.root, view.name) + view.ext;
        var foundView = view.path ? true : false;
        this.sendActionViewFound(view.name, viewPath, foundView, context);
    };
    ExpressInspectorActionRouteView.prototype.onResponseSend = function (response, originalArgs) {
        var context = HttpHelper_1.HttpHelper.getContext(response);
        this.contextManager.checkContextID('ExpressInspectorActionRouteView::onResponseSend()', context ? context.id : undefined);
        var position = 0;
        if (originalArgs.length === 2 && typeof originalArgs[0] === 'number' && typeof originalArgs[1] !== 'number') {
            position = 1;
        }
        else if (originalArgs.length === 1 && typeof originalArgs[0] === 'number') {
            position = -1;
        }
        // TODO: this should be an extension point
        if (position >= 0 && typeof originalArgs[position] === 'string' && response.req.baseUrl !== '/glimpse') {
            var contentType = HttpHelper_1.HttpHelper.parseContentType(response.get('Content-Type'));
            if ((contentType.type === 'text' && contentType.subtype === 'html') || (contentType.type === '' && contentType.subtype === '')) {
                var scripts = this.scriptManager.getScriptTagsForCurrentRequest(context);
                var body = originalArgs[position];
                body = this.scriptManager.injectScript(body, scripts);
                originalArgs[position] = body;
            }
        }
    };
    ExpressInspectorActionRouteView.prototype.sendActionViewFound = function (viewName, viewPath, viewFound, context) {
        var viewSearchedTime = this.dateTime.now;
        this.broker.createAndSendMessage({
            // 'action-view-found'
            viewName: viewName,
            viewPath: viewPath,
            viewDidFind: viewFound,
            viewSearchedTime: viewSearchedTime
        }, ['action-view-found'], undefined, /*indices*/ context);
    };
    return ExpressInspectorActionRouteView;
}());
exports.ExpressInspectorActionRouteView = ExpressInspectorActionRouteView;

//# sourceMappingURL=../../maps/inspectors/ExpressInspectorActionRouteView.js.map
