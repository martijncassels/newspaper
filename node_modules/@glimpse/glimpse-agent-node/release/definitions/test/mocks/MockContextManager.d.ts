/// <reference types="node" />
import { DateTimeValue } from '../../configuration/DateTimeValue';
import { IAgentProviders } from '../../IAgent';
import { IContext, IContextManager, IRunInContextCallback, IWrappedCallback } from '../../messaging/IContextManager';
import { IErrorReportingService } from '@glimpse/glimpse-common';
import * as http from 'http';
export declare class MockContextManager implements IContextManager {
    private context;
    static defaultContext(options?: {
        req?: http.IncomingMessage;
    }, startTime?: DateTimeValue): IContext;
    constructor(context?: IContext);
    createContext(req: http.IncomingMessage): IContext;
    currentContext(): IContext;
    isWithinContext(): boolean;
    runInContext(context: IContext, callback: IRunInContextCallback): any;
    runInNewContext(req: http.IncomingMessage, callback: IRunInContextCallback): any;
    runInNullContext(callback: IRunInContextCallback): any;
    wrapInCurrentContext(callback: IWrappedCallback): IWrappedCallback;
    checkContextID(location: string, expectedContextID?: string): void;
    setServices(services: IAgentProviders): void;
    getErrorReportingService(): IErrorReportingService;
}
