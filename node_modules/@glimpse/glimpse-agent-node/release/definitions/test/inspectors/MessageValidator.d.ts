export declare class MessageValidator {
    private mongoDeleteSchema;
    private mongoInsertSchema;
    private mongoUpdateSchema;
    private mongoReadStartSchema;
    private mongoReadEndSchema;
    private httpRequestSchema;
    private httpResponseSchema;
    private webRequestSchema;
    private webResponseSchema;
    private logWriteSchema;
    private logJSONSchema;
    private logTimespanBeginSchema;
    private logTimespanEndSchema;
    private logTokenPrintfSchema;
    private mixinCallStackSchema;
    private mixinCorrelationBeginSchema;
    private mixinCorrelationEndSchema;
    private mixinCorrelationSchema;
    constructor();
    /**
     * Add schema refs
     */
    private addSchema(schema);
    static parsePayload(message: any): any;
    validateCorrelationBeginMessage(message: any): void;
    validateCorrelationEndMessage(message: any): void;
    validateCallstackMessage(message: any): void;
    validateLogWriteMessage(message: any): void;
    validateLogJSONMessage(message: any): void;
    validateLogTimespanBeginMessage(message: any): void;
    validateLogTimespanEndMessage(message: any): void;
    validateLogTokenPrintfMessage(message: any): void;
    validateMongoDeleteMessage(message: any): void;
    validateMongoInsertMessage(message: any): void;
    validateMongoUpdateMessage(message: any): void;
    validateMongoReadStartMessage(message: any): void;
    validateMongoReadEndMessage(message: any): void;
    validateHttpRequestMessage(message: any): void;
    validateHttpResponseMessage(message: any): void;
    validateWebRequestMessage(message: any): void;
    validateWebResponseMessage(message: any): void;
    private validateMessage(message, jsonSchema, messageTypes);
}
