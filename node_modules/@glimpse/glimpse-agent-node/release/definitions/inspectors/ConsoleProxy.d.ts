import { IAgent } from '../IAgent';
import { ProxyBase } from './ProxyBase';
export declare enum LogLevel {
    Debug = 0,
    Log = 1,
    Info = 2,
    Warning = 3,
    Error = 4,
}
/**
 * The Proxy class for Console logging
 */
export declare class ConsoleProxy extends ProxyBase {
    private agent;
    private contextManager;
    private stackHelper;
    private configSettings;
    private messageConverter;
    private _realConsoleMethods;
    private _realConsolePrototypeMethods;
    private _suppressLogWriteMessage;
    private _suppressGlimpseMessage;
    private _timerLabels;
    /**
     * Init the proxy.
     */
    init(agent: IAgent, consoleModule: any): any;
    readonly forceLoadModule: boolean;
    readonly moduleName: string;
    /**
     * helper method that will send the appropriate glimpse message and invoke the underlying console method
     */
    private proxyHelper(originalThis, originalArgs, realMethod, logLevel, stackTopFunction);
    /**
     * logic to send messages for Console.assert()
     */
    private assert(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * Logic to send glimpse messages for Console.dir()
     */
    private dir(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * logic to support glimpse messages for timeEnd
     */
    private time(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * logic to support glimpse messages for timeEnd
     */
    private timeEnd(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * This is a no-op for now as Node doesn't support debug, but browsers do, so we'll leave this here for when this
     * proxy is hooked up on browser clients.
     */
    private debug(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * Logic to send glimpse messages for Console.error()
     */
    private error(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * Logic to send glimpse messages for Console.error()
     */
    private trace(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * Logic to send glimpse messages for Console.info()
     */
    private info(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * Logic to send glimpse messages for Console.log()
     */
    private log(originalThis, originalArgs, realMethod, stackTopFunction);
    /**
     * Logic to send glimpse messages for Console.warn()
     */
    private warn(originalThis, originalArgs, realMethod, stackTopFunction);
    private createTimerBeginMessage(label, correlationId);
    private createTimerEndMessage(label, correlationId, durationInMilliseconds);
    /**
     * create a 'log-json' glimpse message
     */
    private createLogJSONMessage(logArguments, level, category);
    /**
     * create a 'log-write' glimpse message
     */
    private createLogWriteMessage(logArguments, level, category, isPrintf, ...extraTypes);
    private sendMessage<ILogWriteMessage>(messageEnvelope, stackFrames);
    /**
     *  helper method to hookup up a proxy method on the Console object.  This helper
     *  accounts for the fact that there could potentially be two different sets of
     *  log methods, the 'console.*' methods, and then the Console.prototype.* methods.
     */
    private addProxy(methodToProxy, methodToCall, proxyFunction, consoleModule);
}
