/// <reference types="node" />
import * as events from 'events';
import * as http from 'http';
export interface ServerResponseWithInternals extends http.ServerResponse {
    _header?: string;
    _trailer?: string;
}
export declare class ResponseListener extends events.EventEmitter {
    private static glimpseResponseListenerProperty;
    static bodyEvent: string;
    static headersEvent: string;
    static statusCodeEvent: string;
    static statusMessageEvent: string;
    private _sentStatusCode;
    private _sentStatusMessage;
    constructor(res: http.ServerResponse);
    static attachListener(res: http.ServerResponse): ResponseListener;
    static getAllHeaders(res: ServerResponseWithInternals): {
        [key: string]: string[];
    };
    /**
     * Returns the status code actually sent to the client (as this may be different than `statusCode`).
     *
     * Notes:
     *
     *  - If headers have not yet been sent, then the value returned is what *would* be sent.
     *
     *  - If headers were sent before the attachment of this listener, then the value returned
     *    will be the value of `statusCode` at the time of attachment (and in that case may not
     *    be the *actual* value sent to the client).
     */
    readonly sentStatusCode: number;
    /**
     * Returns the status message actually sent to the client (as this may be different than `statusMessage`).
     *
     * Notes:
     *
     *  - If headers have not yet been sent, then the value returned is what *would* be sent.
     *
     *  - If headers were sent before the attachment of this listener, then the value returned
     *    will be the value of `statusMessage` at the time of attachment (and in that case may not
     *    be the *actual* value sent to the client).
     */
    readonly sentStatusMessage: string;
    private static addFormattedHeaders(headers, formattedHeaders);
    private patchResponseSetHeader(res);
    private patchResponseAddTrailers(res);
    private publishHeaderChanges(headers);
    private patchResponseSetStatusCode(res);
    private patchResponseSetStatusMessage(res);
    private patchResponseWrite(res);
}
