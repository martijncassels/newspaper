import { IAgent } from '../IAgent';
import { DateTimeValue } from '../configuration/DateTimeValue';
/**
 * Class that represents a set of data that we pass along as part of the "options"
 * parameter to various MongoDB calls. This lets us pass data between multiple proxy calls on the
 * same call stack or call chain.
 */
export declare class GlimpseMongoDBOptions {
    private static CUSTOM_KEY;
    private _operationName;
    private _correlationId;
    private _readStartTime;
    private _recordsRead;
    private messagesSent;
    /**
     * Get the operation name
     */
    /**
     * Set the primary operation name for this call chain.  This is what is shown in the custom message.
     */
    operationName: string;
    /**
     * Get correlation ID for messages on this cursor
     */
    /**
     * set correlation ID for messages on this cursor
     */
    correlationId: string;
    /**
     * set if a message is sent for the given message type
     */
    getMessageSent(messageType: string): boolean;
    /**
     * get if a message is sent for the given message type
     */
    setMessageSent(messageType: string, sent: boolean): void;
    recordsRead: number;
    incremenetRecordsRead(): void;
    readStartTime: DateTimeValue;
    /**
     * Return the GlimpseMongoDBOptions instance from the given object, or return undefined if not available.
     */
    static get(options: Object): GlimpseMongoDBOptions;
    /**
     * Remove the GlimpseMongoDBOptions instance from the given object
     */
    static clear(options: Object): void;
    /**
     *  Ensure the GlimpseMongoDBOptions instance exists on the given object, and return it.
     */
    static ensure(options: Object): GlimpseMongoDBOptions;
}
export declare class MongoDBInspector {
    private agent;
    private contextManager;
    private listeners;
    init(agent: IAgent): any;
    removeEventListeners(): void;
    /**
     *  send message indicating first read of a record from mongo
     */
    private sendReadStartMessage(err, correlationId, operation, startTime, query, options, ci);
    /**
     * send message indicating mongodb cursor was closed and a read effectively ended.
     *
     * closeStartTime is the point in time when the close method was called.
     */
    private sendReadEndMessage(err, correlationId, closeStartTime, readStartTime, totalRecordsRead);
    /**
     *  sendAfterInsertMessage
     */
    private sendAfterInsertMessage(err, operation, startTime, docs, numInserted, insertedIDs, options, ci);
    /**
     * method to send an update completed message
     */
    private sendAfterUpdateMessage(err, operation, startTime, query, updates, matchedCount, modifiedCount, upsertedCount, options, ci);
    /**
     * method to send a delete completed message.
     */
    private sendAfterDeleteMessage(err, operation, startTime, query, numDeleted, options, ci);
    /**
     * Handle insert method
     */
    private insertInspector(event);
    /**
     * Notify insert methods including 'insertMany' and 'insertOne'
     */
    private insertMethodsInspector(event);
    /**
     * Notify delete methods including 'deleteMany', 'deleteOne', 'findOneAndDelete', 'remove'
     */
    private deleteMethodsInspector(event);
    /**
     * Notify update operation
     */
    private updateMethodsInspector(event);
    /**
     *  Inspect collection read count
     */
    private countInspector(event);
    private readStartInspector(event);
    /**
     * respond to each record being read through a cursor.
     */
    private readRecordInspector(event);
    /**
     * respond to the end of a read operation through a cursor.  Should generally respond to a cursor close.
     */
    private readEndInspector(event);
    /**
     * method to extract connection info details from a MongoDB Cusror istance
     */
    private static GetConnectionInfoFromCursor(cursor);
    /**
     * method to extract connection info details from a MongoDB Collection istance
     */
    private static GetConnectionInfoFromCollection(collection);
}
