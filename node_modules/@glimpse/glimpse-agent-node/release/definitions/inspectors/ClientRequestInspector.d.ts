/// <reference types="node" />
import { IAgent } from '../IAgent';
import { IMessage } from '../messaging/IMessage';
import { IContext } from '../messaging/IContextManager';
import { DateTimeValue } from '../configuration/DateTimeValue';
import { IErrorReportingService } from '@glimpse/glimpse-common';
import { IBodyProperty } from '../util/HttpHelper';
import { IMultiPartFormSummarizer } from '../util/MultiPartFormSummarizer';
import { IStackFrame } from './util/StackHelper';
import { ClientRequest, IncomingMessage } from 'http';
export interface IDataHttpRequestPayload {
    protocol: {
        identifier: string;
        version: string;
    };
    url: string;
    method: string;
    frames: IStackFrame[];
    startTime: string;
    headers: {
        [key: string]: string | string[];
    };
    isAjax: boolean;
    clientIp: string;
    body: IBodyProperty;
    timing: {
        startTime: number;
    };
    correlationId: string;
}
export interface IDataHttpResponsePayload {
    url: string;
    headers: {
        [key: string]: string | string[];
    };
    statusCode: number;
    statusMessage: string;
    endTime: string;
    duration: number;
    body: IBodyProperty;
    timing: {
        startTime: number;
        responseStart: number;
        responseEnd: number;
    };
    correlationId: string;
}
export interface IRequestData {
    requestCreatedTime: DateTimeValue;
    requestStartTime: DateTimeValue;
    responseStartTime: DateTimeValue;
    responseEndTime: DateTimeValue;
    duration: number;
    options: any;
    request: ClientRequest;
    response: IncomingMessage;
    requestBodyChunks: Array<Buffer | string>;
    requestBodyLength: number;
    responseBodyChunks: Array<Buffer | string>;
    responseBodyLength: number;
    correlationId: string;
    isMultiPartFormData: boolean;
    multiPartFormSummarizer: IMultiPartFormSummarizer;
    responseMessage: IMessage<IDataHttpResponsePayload>;
    context: IContext;
}
export declare class ClientRequestInspector {
    private agent;
    private requests;
    private listeners;
    private errorReportingService;
    private stackHelper;
    private messageConverter;
    private normalizeOptions(options, req);
    numOutstandingRequests(): number;
    before(masterData: IRequestData): void;
    after(masterData: IRequestData): void;
    init(agent: IAgent, errorReportingService: IErrorReportingService): void;
    removeEventListeners(): void;
    private onRequestCreated(event);
    private onRequestDataSent(event);
    private onRequestEnd(event);
    private onRequestError(event);
    private onResponseReceived(event);
    private onResponseDataReceived(event);
    private onResponseEnd(event);
    private onResponseError(event);
}
