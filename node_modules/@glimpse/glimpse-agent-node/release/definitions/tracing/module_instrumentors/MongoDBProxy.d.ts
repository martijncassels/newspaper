export declare class MongoDBProxy {
    private realCollectionMethods;
    private realCursorMethods;
    init(mongodbModule: any, resolvedPath: any): void;
    /**
     * Add a proxy for a mongoDB collection method
     */
    private setupCollectionProxy(targets, proxyHelper, mongoDBModule);
    /**
     * Add a proxy for a mongoDB collection method
     */
    private setupCursorProxy(targets, proxyHelper, mongoDBModule);
    /**
     *  helper method to hookup up a proxy method on the mongoDB collection class
     */
    private addProxyForCollectionMethod(key, proxy, mongodb);
    /**
     * helper method to hookup up a proxy method on the mongoDB cursor class
     */
    private addProxyForCursorMethod(key, proxy, mongodb);
    /**
     * helper method to proxy various cursor read statements that support a callback or a promise
     */
    private cursorCloseProxy(methodName, originalThis, originalArgs);
    /**
     * helper method to proxy various cursor read statements that support a callback or a promise
     */
    private cursorStartReadProxyCallbackOrPromise(methodName, originalThis, originalArgs);
    /**
     * helper method to proxy cursor read statements that support only callbacks
     */
    private cursorStartReadProxyCallbackNoPromise(methodName, originalThis, originalArgs);
    /**
     * Proxy for collection read count
     */
    private collectionReadProxy(methodName, originalThis, originalArgs);
    /**
     *  helper method to proxy various insert methods
     */
    private insertMethodsProxy(methodName, originalThis, originalArgs);
    /**
     * Proxy for update methods including 'updateOne', 'updateMany', 'replaceOne', 'findOneAndUpdate'
     */
    private updateProxy(methodName, originalThis, originalArgs);
    /**
     *  helper method to proxy deleteOne, deleteMany or findOneAndDelete
     */
    private deleteProxy(methodName, originalThis, originalArgs);
    /**
     * helper method that will execute a callback if present, or return a promise.
     *
     * @callbackStartIndex - the string  index into originalArgs of where a callback may be.
     * @callbackProbeLength - the number of slots in originalArgs to probe for a paramater of type function.  This will be the callback.
     * @realMethod - is the actual method that we're proxying.
     * @onSuccess - the callback to raise when @realMethod is successful.
     * @onFailure - the callback to raise when @realMethod fails.
     */
    private callbackOrPromise(originalThis, originalArgs, callbackStartIndex, callbackProbeLength, realMethod, onSuccess, onFailure);
    /**
     * Normalizes position of optional options and callback arguments on the given array.
     */
    private static swizzleArgs(argsArray);
}
