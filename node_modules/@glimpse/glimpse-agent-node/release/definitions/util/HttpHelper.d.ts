/// <reference types="node" />
import { Url } from 'url';
import http = require('http');
import { IContext } from '../messaging/IContextManager';
import { IConfigSettings } from '@glimpse/glimpse-common';
import { IPartSummary } from '../inspectors/IServerRequestInspector';
export declare class RequestHelper {
    static header(req: any, name: any): any;
    static protocol(req: any): string;
    static parseurl(req: any): Url | undefined;
    static host(req: any): any;
    static hostname(req: any): any;
    static parseCookies(req: any): {
        [key: string]: string;
    };
}
export declare class ResponseHelper {
    static appendHeader(res: any, field: any, val: any): any;
    static setCookie(res: any, name: any, value: any, options?: any): typeof ResponseHelper;
    static clearCookie(res: any, name: any, options: any): typeof ResponseHelper;
}
export interface IContentType {
    type: string;
    subtype: string;
    parameters: {
        [key: string]: string;
    };
}
export interface IBodyProperty {
    size: number;
    encoding: string;
    content: string;
    isTruncated: boolean;
    parts?: IPartSummary[];
}
export declare class HttpHelper {
    /**
     * helper method to store the context on an HTTP request or response instance
     */
    static setContext(requestResponse: http.IncomingMessage | http.ServerResponse | http.ClientRequest, context: IContext): void;
    /**
     * helper method to retrieve the context from an HTTP request or response instance
     */
    static getContext(requestResponse: http.IncomingMessage | http.ServerResponse | http.ClientRequest): IContext;
    static isInProcessServerRequest(request: http.IncomingMessage): boolean;
    static isInProcessServerResponse(response: http.ServerResponse): boolean;
    static getMaxBodySize(configSettings: IConfigSettings): number;
    /**
     * Creates the `body` property for the `data-http-request`, `data-http-response`,
     * `web-request`, and `web-response` messages. The value returned from this
     * method can be directly assigned to the body property of a message
     *
     * @parameter {http.IncomingMessage | http.ClientRequest | http.ServerResponse} request -
     *      The request or response of an HTTP client or server request associated
     *      with the body
     * @parameter {Array<Buffer | string>} bodyChunks - The body chunks, as sent
     *      to `data` events but also truncated so that the length is not greater
     *      than the maximum body capture size configuration option
     * @parameter {number} size - The size of the captured body, irrespective of
     *      the maximum capture body size configuration option
     * @returns {IBodyProperty} The body property for the http message
     */
    static createMessageBodyProperty(request: http.IncomingMessage | http.ClientRequest | http.ServerResponse, bodyChunks: Array<Buffer | string>, size: number, configSettings: IConfigSettings, partSummaries?: IPartSummary[]): IBodyProperty;
    /**
     * Given an IContentType, return true if the content type is multipart/form-data, false otherwise
     */
    static isMultiPartFormData(contentType: IContentType): boolean;
    /**
     * Given an IContentType, return the boundary delimiter string if available, or undefined if not available.
     * This will strip leading/trailing double-quotes if present.
     */
    static getMultiPartFormBoundary(contentType: IContentType): string;
    static isValidBoundary(boundary: string): boolean;
    /**
     * parse a content-type header into its respective parts per RFC 1341
     * https://www.w3.org/Protocols/rfc1341/4_Content-Type.html.
     *
     * Note this implementation is "accomodating" of input that doesn't conform to the spec.
     */
    static parseContentType(header: string): IContentType;
}
