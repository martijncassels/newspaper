/// <reference types="node" />
/**
 * Represents a package specifically known during analysis.
 */
export interface IKnownPackage {
    /**
     * The name of the package.
     */
    packageName: string;
    /**
     * (Optional) If provided, the module filename that represents the entrypoint of the package.
     */
    match?: string;
}
/**
 * Provides analysis of loaded Node modules.
 */
export declare class RequireAnalyzer {
    static applicationPackageName: string;
    /**
     * Gets a list package names, directly referenced by the application, that resulted in a set of modules being loaded.
     *
     * @nodeModules - A set of loaded Node modules, mapped by ID.
     * @excludedModules - Packages which should be excluded from the resulting list
     */
    static getReferencedPackageNames(nodeModules: {
        [key: string]: NodeModule;
    }, excludedPackages: IKnownPackage[]): string[];
    /**
     * Gets the package name, directly referenced by the application, that resulted in a module being loaded.
     *
     * @nodeModule - A loaded Node module.
     * @knownModules - Packages which are specifically known (e.g. have custom filename matching)
     */
    static getReferencedPackageName(nodeModule: NodeModule, knownModules?: IKnownPackage[], parentModuleCache?: {
        [key: string]: string;
    }): string;
}
