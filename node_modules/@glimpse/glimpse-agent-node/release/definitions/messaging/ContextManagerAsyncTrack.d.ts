/// <reference types="node" />
import { IContext, IContextManager, IRunInContextCallback } from './IContextManager';
import { ContextManagerBase } from './ContextManagerBase';
import { IAsyncTrack } from './../async-track/async-track';
import * as http from 'http';
export declare class ContextManagerAsyncTrack extends ContextManagerBase implements IContextManager {
    private static GLIMPSE_NAMESPACE;
    private static GLIMPSE_CONTEXT;
    asyncTrack: any;
    init(asyncTrack?: IAsyncTrack): void;
    createAsyncState(context: any): {
        GLIMPSE_NAMESPACE: {
            GLIMPSE_CONTEXT: any;
        };
    };
    runInContext(context: IContext, callback: IRunInContextCallback): any;
    runInNewContext(req: http.IncomingMessage, callback: IRunInContextCallback): any;
    runInNullContext(callback: IRunInContextCallback): any;
    wrapInCurrentContext(callback: IRunInContextCallback): () => any;
    currentContext(): any;
}
